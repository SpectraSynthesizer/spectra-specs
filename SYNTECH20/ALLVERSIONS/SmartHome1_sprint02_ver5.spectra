import "DwyerPatterns.spectra"
module SmartHome1_sprint01_ver1

type Position = { OUT, WAIT_OUTSIDE, LIVING_ROOM, BATH_ROOM, PARANTS_ROOM, BABY_ROOM };

predicate atHome(Position person):
	 !(person=OUT | person=WAIT_OUTSIDE);
	 
predicate emptyRoom(Position room):
	 father!=room & mother!=room & baby!=room;

predicate stayInsideOrOutside(Position person):
	 atHome(person) = next(atHome(person));
	 
predicate stayOutsideIfDoorLocked(Position person):
	(doorLocked-> (person=WAIT_OUTSIDE -> (next(person)!=LIVING_ROOM)));
	
predicate stayInsideIfDoorLocked(Position person):
	(doorLocked-> (person=LIVING_ROOM -> (next(person)!=WAIT_OUTSIDE )));

	 
predicate fromRoomsToOtherPlace(Position person):
	 ((person=BATH_ROOM | person=BABY_ROOM | person=PARANTS_ROOM) -> (next(person)=person | next(person)=LIVING_ROOM));
	 
predicate legalMoveFromOut(Position person):
	 (person=OUT -> (next(person=OUT) | next(person=WAIT_OUTSIDE)));
	 
predicate legalMoveFromWaitOutside(Position person):	 
	 (person=WAIT_OUTSIDE ->( next(person)=WAIT_OUTSIDE |next(person = OUT) | next(person=LIVING_ROOM)));
	 
	 
// Environment controlled input variables (sensors)

// Asm 1 - every member of the family can be only in one place each time. Empty house at the beginning;
env Position father;
env Position mother;
env Position baby;
env Position thief;
asm thief=OUT;
asm father=OUT & mother=OUT & baby=OUT;

//System controlled output variables (lights)

sys boolean lightLivingRoom;
sys boolean lightBabyRoom;
sys boolean lightParantsRoom;
sys boolean lightBathRoom;
sys boolean babyAloneAlarm;
sys boolean doorLocked;
sys Position cup;


// Asm 2 - can't go inside or outside when the door is locked
asm G(stayInsideIfDoorLocked(thief) & stayOutsideIfDoorLocked(thief));
asm G(stayInsideIfDoorLocked(mother) & stayOutsideIfDoorLocked(mother));
asm G(stayInsideIfDoorLocked(father) & stayOutsideIfDoorLocked(father));
asm G(stayInsideIfDoorLocked(baby) & stayOutsideIfDoorLocked(baby));

// Asm 3 - baby can't move alone
asm G((father!=baby & mother!=baby) -> next(baby)=baby);
asm G((father=baby & mother=baby)-> (next(baby)=baby | next(baby)=next(father) | next(baby)=next(mother)));
asm G((father=baby & mother!=baby)-> (next(baby)=baby | next(baby)=next(father)));
asm G((mother=baby & father!=baby)-> (next(baby)=baby | next(baby)=next(mother)));

//  Assumptions 4-6 - legal moves
asm G legalMoveFromOut(father);
asm G legalMoveFromOut(mother);
asm G legalMoveFromOut(baby);
asm G legalMoveFromOut(thief);
asm G legalMoveFromWaitOutside(father);
asm G legalMoveFromWaitOutside(mother);
asm G legalMoveFromWaitOutside(baby);
asm G legalMoveFromWaitOutside(thief);
asm G fromRoomsToOtherPlace(father);
asm G fromRoomsToOtherPlace(mother);
asm G fromRoomsToOtherPlace(baby);
asm G fromRoomsToOtherPlace(thief);

//Asm 7 - the thief will never stop trying
asm GF thief!=OUT;

//Asm 8 - the thief will take a rest
asm GF thief=OUT;


//guarantees

// Gar 1 - the door is not locked iff there is no thief and mother or father is at WAIT_OUTSIDE or LIVING_ROOM

gar	G (doorLocked = (thief=WAIT_OUTSIDE | (!(father=WAIT_OUTSIDE | mother=WAIT_OUTSIDE | mother=LIVING_ROOM | father=LIVING_ROOM))));


// Gar 2 - if the room is empty the light in that room is OFF
gar G(emptyRoom(LIVING_ROOM)->!lightLivingRoom);
gar G(emptyRoom(BABY_ROOM)->!lightBabyRoom);
gar G(emptyRoom(PARANTS_ROOM)->!lightParantsRoom);

// Gar 3 - the light in bathroom is ON iff the bathroom is not empty

gar	G( lightBathRoom = (mother=BATH_ROOM | father=BATH_ROOM | baby=BATH_ROOM));



// Gar 4-5 -if the baby is alone at the house or alone at WAIT_OUTSIDE or at BATH_ROOM there will be baby alarm

gar G (babyAloneAlarm = (cup!=baby & ((baby!= OUT & baby!=WAIT_OUTSIDE &( mother=OUT | mother=WAIT_OUTSIDE) & (father = OUT | father=WAIT_OUTSIDE)) |
	 (baby=WAIT_OUTSIDE & father!=WAIT_OUTSIDE & mother!=WAIT_OUTSIDE) | 
	(baby=BATH_ROOM & mother!=BATH_ROOM & father!=BATH_ROOM))));
	

// Gar 6 - the thief will never be able to enter to the house
gar G(thief=OUT | thief=WAIT_OUTSIDE);

// Gar 7 - baby will not stay alone for more than 3 moments 
counter timeBabyAlone(0..3){
	timeBabyAlone=0;
	inc: babyAloneAlarm;
	reset: cup=baby | mother=baby | father = baby;
	overflow: false;
}

// Asm 8 - if the cup is inside, he is with the baby
gar G(cup=baby | cup=OUT);

// Asm 9 - infinitely often the cup will be outside 
gar GF(cup=OUT);

// Asm 10 - infinitely often the cup will be with the baby 
gar GF(cup=baby );

//Asm 11 - infinitely often if there is a person in the living room the lights will be on
gar GF ((!emptyRoom(LIVING_ROOM))->lightLivingRoom);



