
spec SmartNeighborhood

// *** define type of day and night ***
type DayTime = {DAY, NIGHT};


//***Environment controlled input variables (sensors)***
define N := 4;
define crosswalkLoc := 1; //between can 1 and 2.
define PEDEST_WALK_SIZE := (N*2 + 1);
define NUM_LIGHTS := (N*2 - 2);

env DayTime dayTime;
env boolean energyEfficiencyMode;

//env boolean sidewalkNorth;
//env boolean sidewalkSouth;


env boolean[PEDEST_WALK_SIZE] pedestrians;  // pedestrians[PEDEST_WALK_SIZE-1] => someone on the crosswalk
//env boolean crossingCrosswalkNS;
//env boolean crossingCrosswalkSN;
env boolean[N] garbageCansNorth;
env boolean[N] garbageCansSouth;


//***System controlled output variables (lights)***
sys boolean isCleaningN;
sys boolean isCleaningS;
//sys boolean lightNorth;
//sys boolean lightSouth;
sys Int(0..N) garbageTruckNorth_location; //location N means not on the street.
sys Int(0..N) garbageTruckSouth_location;
sys boolean[NUM_LIGHTS] lights;

//***Assumptions on day and night***
asm GF dayTime=DAY;
asm GF dayTime=NIGHT;// & energyEfficiencyMode;
//asm GF energyEfficiencyMode;
//asm GF !energyEfficiencyMode;


//***Initial assumptions***
//all pedestrian areas start empty
//asm !sidewalkNorth & !sidewalkSouth & !crossingCrosswalkNS; //& !crossingCrosswalkSN;
asm side_walk_starts_empty:
	forall i in Int(0..(PEDEST_WALK_SIZE-1)). pedestrians[i] = false;
asm all_cans_start_empty:
	forall i in Int(0..(N-1)). ((!garbageCansNorth[i]) & !garbageCansSouth[i]);
asm dayTime = DAY;



//***Assumptions on pedestrian walking routes***
/*asm G sidewalkNorth -> next(crossingCrosswalkNS);
asm G crossingCrosswalkNS -> next(sidewalkSouth);
//asm G sidewalkSouth -> next(crossingCrosswalkSN); //sims in pool with no rail
//asm G crossingCrosswalkSN -> next(sidewalkNorth);
asm GF !sidewalkNorth;
asm GF !sidewalkSouth;
asm GF !crossingCrosswalkNS; //& !crossingCrosswalkSN;
//Pedestrians can't show up on the crosswalk with coming from the north side.
asm G (next(crossingCrosswalkNS)->sidewalkNorth); */

//***Assumptions on pedestrian walking routes***
//asm GF !pedestrians[PEDEST_WALK_SIZE-1];  //the crosswalk will always empty eventually
asm GF !crossing;
//asm G pedestrians[PEDEST_WALK_SIZE-1] -> next(!pedestrians[PEDEST_WALK_SIZE-1]);
asm GF pedestrians[0];
asm GF pedestrians[1];
asm GF pedestrians[2];

//***Assumptions on garbage cans***

//Eventually always each can will be full:
asm GF garbageCansNorth[0];
asm GF garbageCansSouth[0];
asm GF garbageCansNorth[1];
asm GF garbageCansSouth[1];
asm GF garbageCansNorth[2];
asm GF garbageCansSouth[2];
asm GF garbageCansNorth[3];
asm GF garbageCansSouth[3];

//if truck is at can i, and it's cleaning, then the can will be empty on next stage.
asm G forall i in Int(0..(N-1)). ((garbageTruckNorth_location = i) & garbageCansNorth[i] & isCleaningN) -> next(!garbageCansNorth[i]);
asm G forall i in Int(0..(N-1)). ((garbageTruckSouth_location = i) & garbageCansSouth[i] & isCleaningS) -> next(!garbageCansSouth[i]);

//garbage can stays full until it's cleaned
asm G (garbageCansNorth[0] & (garbageTruckNorth_location != 0 | !isCleaningN)) -> next(garbageCansNorth[0]);
asm G (garbageCansNorth[1] & (garbageTruckNorth_location != 1 | !isCleaningN)) -> next(garbageCansNorth[1]);
asm G (garbageCansNorth[2] & (garbageTruckNorth_location != 2 | !isCleaningN)) -> next(garbageCansNorth[2]);
asm G (garbageCansNorth[3] & (garbageTruckNorth_location != 3 | !isCleaningN)) -> next(garbageCansNorth[3]);

asm G (garbageCansSouth[0] & (garbageTruckSouth_location != 0 | !isCleaningS)) -> next(garbageCansSouth[0]);
asm G (garbageCansSouth[1] & (garbageTruckSouth_location != 1 | !isCleaningS)) -> next(garbageCansSouth[1]);
asm G (garbageCansSouth[2] & (garbageTruckSouth_location != 2 | !isCleaningS)) -> next(garbageCansSouth[2]);
asm G (garbageCansSouth[3] & (garbageTruckSouth_location != 3 | !isCleaningS)) -> next(garbageCansSouth[3]);

//define crossing := crossingCrosswalkNS; //| crossingCrosswalkSN;	
define crossing := pedestrians[PEDEST_WALK_SIZE-1];


//***Initial Guarantees***
//gar !lightNorth & !lightSouth;
//(forall i in Int(0..(NUM_LIGHTS-1)). lights[i] = false);
//gar all_lights_off;
gar garbageTruckNorth_location = N;
gar garbageTruckSouth_location = N;
gar !isCleaningN;
gar !isCleaningS;

//***truck Guarantees***
//If truck is before crosswalk, and someone is crossing, then it won't move
gar G (crossing & (garbageTruckNorth_location = crosswalkLoc)) ->
   (next(garbageTruckNorth_location) = crosswalkLoc); 
gar G (crossing & (garbageTruckSouth_location = crosswalkLoc)) ->
   (next(garbageTruckSouth_location) = crosswalkLoc); 

/*new crossing trigger logic
gar trig [true]*[crossing & (garbageTruckNorth_location = crosswalkLoc)] |=> [(garbageTruckNorth_location = crosswalkLoc)]{2};
gar trig [true]*[crossing & (garbageTruckSouth_location = crosswalkLoc)] |=> [(garbageTruckSouth_location = crosswalkLoc)]{2};
*/
//If truck at full can, stays there to clean next turn
predicate truckAtFullCanWillCleanNorth(Int(0..(3)) i):
	(garbageCansNorth[i] & (garbageTruckNorth_location = i) & !isCleaningN) -> (next(isCleaningN) & (next(garbageTruckNorth_location) = i));

/*gar G truckAtFullCanWillCleanNorth(0);
gar G truckAtFullCanWillCleanNorth(1);
gar G truckAtFullCanWillCleanNorth(2);
gar G truckAtFullCanWillCleanNorth(3);*/

gar trig [true]*[(garbageCansNorth[0] & (garbageTruckNorth_location = 0) & !isCleaningN)] |=> [isCleaningN & garbageTruckNorth_location=0][!isCleaningN];// & !garbageCansNorth[0]];
gar trig [true]*[(garbageCansNorth[1] & (garbageTruckNorth_location = 1) & !isCleaningN)] |=> [isCleaningN & garbageTruckNorth_location=1][!isCleaningN];// & !garbageCansNorth[1]];
gar trig [true]*[(garbageCansNorth[2] & (garbageTruckNorth_location = 2) & !isCleaningN)] |=> [isCleaningN & garbageTruckNorth_location=2][!isCleaningN];// & !garbageCansNorth[2]];
gar trig [true]*[(garbageCansNorth[3] & (garbageTruckNorth_location = 3) & !isCleaningN)] |=> [isCleaningN & garbageTruckNorth_location=3][!isCleaningN];// & !garbageCansNorth[3]];


/*If truck at full can, stays there to clean next turn
gar G (garbageCansNorth[0] & (garbageTruckNorth_location = 0) & !isCleaningN) -> (next(isCleaningN) & (next(garbageTruckNorth_location) = 0));
gar G (garbageCansNorth[1] & (garbageTruckNorth_location = 1) & !isCleaningN) -> (next(isCleaningN) & (next(garbageTruckNorth_location) = 1));
gar G (garbageCansNorth[2] & (garbageTruckNorth_location = 2) & !isCleaningN) -> (next(isCleaningN) & (next(garbageTruckNorth_location) = 2));
gar G (garbageCansNorth[3] & (garbageTruckNorth_location = 3) & !isCleaningN) -> (next(isCleaningN) & (next(garbageTruckNorth_location) = 3));
*/
predicate truckAtFullCanWillCleanSouth(Int(0..(3)) i):
	(garbageCansSouth[i] & (garbageTruckSouth_location = i) & !isCleaningS) -> (next(isCleaningS) & (next(garbageTruckSouth_location) = i));

gar G truckAtFullCanWillCleanSouth(0);
gar G truckAtFullCanWillCleanSouth(1);
gar G truckAtFullCanWillCleanSouth(2);
gar G truckAtFullCanWillCleanSouth(3);
/*
gar G (garbageCansSouth[0] & (garbageTruckSouth_location = 0) & !isCleaningS) -> (next(isCleaningS) & (next(garbageTruckSouth_location) = 0));
gar G (garbageCansSouth[1] & (garbageTruckSouth_location = 1) & !isCleaningS) -> (next(isCleaningS) & (next(garbageTruckSouth_location) = 1));
gar G (garbageCansSouth[2] & (garbageTruckSouth_location = 2) & !isCleaningS) -> (next(isCleaningS) & (next(garbageTruckSouth_location) = 2));
gar G (garbageCansSouth[3] & (garbageTruckSouth_location = 3) & !isCleaningS) -> (next(isCleaningS) & (next(garbageTruckSouth_location) = 3));
*/
	
//If truck is currently cleaning a full can, next state it won't be cleaning and can will be empty.
predicate truckCleaningWillStopNorth(Int(0..(3)) i):
	((garbageCansNorth[i] & (garbageTruckNorth_location = i) & isCleaningN)) -> 
										(next(!isCleaningN) & next(!garbageCansNorth[i]));
/*gar G truckCleaningWillStopNorth(0);
gar G truckCleaningWillStopNorth(1);
gar G truckCleaningWillStopNorth(2);
gar G truckCleaningWillStopNorth(3);*/

/*If truck is currently cleaning a full can, next state it won't be cleaning and can will be empty.
gar G ((garbageCansNorth[0] & (garbageTruckNorth_location = 0) & isCleaningN)) -> (next(!isCleaningN) & next(!garbageCansNorth[0]));
gar G ((garbageCansNorth[1] & (garbageTruckNorth_location = 1) & isCleaningN)) -> (next(!isCleaningN) & next(!garbageCansNorth[1]));
gar G ((garbageCansNorth[2] & (garbageTruckNorth_location = 2) & isCleaningN)) -> (next(!isCleaningN) & next(!garbageCansNorth[2]));
gar G ((garbageCansNorth[3] & (garbageTruckNorth_location = 3) & isCleaningN)) -> (next(!isCleaningN) & next(!garbageCansNorth[3]));
8/

predicate truckCleaningWillStopSouth(Int(0..(3)) i):
	((garbageCansSouth[i] & (garbageTruckSouth_location = i) & isCleaningS)) -> 
										(next(!isCleaningS) & next(!garbageCansSouth[i]));
gar G truckCleaningWillStopSouth(0);
gar G truckCleaningWillStopSouth(1);
gar G truckCleaningWillStopSouth(2);
gar G truckCleaningWillStopSouth(3);
/*
gar G ((garbageCansSouth[0] & (garbageTruckSouth_location = 0) & isCleaningS)) -> (next(!isCleaningS) & next(!garbageCansSouth[0]));
gar G ((garbageCansSouth[1] & (garbageTruckSouth_location = 1) & isCleaningS)) -> (next(!isCleaningS) & next(!garbageCansSouth[1]));
gar G ((garbageCansSouth[2] & (garbageTruckSouth_location = 2) & isCleaningS)) -> (next(!isCleaningS) & next(!garbageCansSouth[2]));
gar G ((garbageCansSouth[3] & (garbageTruckSouth_location = 3) & isCleaningS)) -> (next(!isCleaningS) & next(!garbageCansSouth[3]));
*/

//If truck is cleaning, next turn it doesn't move and isn't cleaning 
//gar G (forall i in Int(0..(N-1)). ((garbageTruckNorth_location = i) & garbageCansNorth[i] & isCleaningN)) -> next(garbageTruckNorth_location = i & !isCleaningN);
//gar G (forall i in Int(0..(N-1)). ((garbageTruckSouth_location = i) & garbageCansSouth[i] & isCleaningS)) -> next(garbageTruckSouth_location = i & !isCleaningS);


//Truck cleaning means it's at a full can
gar alw (isCleaningN -> (exists i in Int(0..(N-1)). (garbageCansNorth[i] = true & garbageTruckNorth_location = i)));
gar alw (isCleaningS -> (exists i in Int(0..(N-1)). (garbageCansSouth[i] = true & garbageTruckSouth_location = i)));


//Eventually always, the truck will come to clean all full cans.
predicate isCleaningGarbageNorth(Int(0..(3)) i):
	(garbageCansNorth[i] & (garbageTruckNorth_location = i) & isCleaningN);
gar GF isCleaningGarbageNorth(0);
gar GF isCleaningGarbageNorth(1);
gar GF isCleaningGarbageNorth(2);
gar GF isCleaningGarbageNorth(3);

/*
gar GF (garbageCansNorth[0] & (garbageTruckNorth_location = 0) & isCleaningN);
gar GF (garbageCansNorth[1] & (garbageTruckNorth_location = 1) & isCleaningN);
gar GF (garbageCansNorth[2] & (garbageTruckNorth_location = 2) & isCleaningN);
gar GF (garbageCansNorth[3] & (garbageTruckNorth_location = 3) & isCleaningN);*/

predicate isCleaningGarbageSouth(Int(0..(3)) i):
	(garbageCansSouth[i] & (garbageTruckSouth_location = i) & isCleaningS);
gar GF isCleaningGarbageSouth(0);
gar GF isCleaningGarbageSouth(1);
gar GF isCleaningGarbageSouth(2);
gar GF isCleaningGarbageSouth(3);
/*
gar GF (garbageCansSouth[0] & (garbageTruckSouth_location = 0) & isCleaningS);
gar GF (garbageCansSouth[1] & (garbageTruckSouth_location = 1) & isCleaningS);
gar GF (garbageCansSouth[2] & (garbageTruckSouth_location = 2) & isCleaningS);
gar GF (garbageCansSouth[3] & (garbageTruckSouth_location = 3) & isCleaningS);*/


//Garbage trucks can only move one can forward, or stay in place.
gar G (garbageTruckNorth_location != N) -> ((next(garbageTruckNorth_location) = garbageTruckNorth_location) | (next(garbageTruckNorth_location) = (garbageTruckNorth_location + 1)));
gar G (garbageTruckSouth_location != N) -> ((next(garbageTruckSouth_location) = garbageTruckSouth_location) | (next(garbageTruckSouth_location) = (garbageTruckSouth_location + 1)));

//Trucks not on road, can only appear at can 0.
gar G garbageTruckNorth_location = N -> (next(garbageTruckNorth_location) = 0 | next(garbageTruckNorth_location) = N);
gar G garbageTruckSouth_location = N -> (next(garbageTruckSouth_location) = 0 | next(garbageTruckSouth_location) = N);

//Truck on empty can will keep moving
// pattern pResponsetoS????
gar G (!garbageCansNorth[0] & garbageTruckNorth_location = 0) -> (next(garbageTruckNorth_location) = 1);
gar G (!garbageCansNorth[1] & garbageTruckNorth_location = 1 & !crossing) -> (next(garbageTruckNorth_location) = 2);
gar G (!garbageCansNorth[2] & garbageTruckNorth_location = 2) -> (next(garbageTruckNorth_location) = 3);
gar G (!garbageCansNorth[3] & garbageTruckNorth_location = 3) -> (next(garbageTruckNorth_location) = 4);

gar G (!garbageCansSouth[0] & garbageTruckSouth_location = 0) -> (next(garbageTruckSouth_location) = 1);
gar G (!garbageCansSouth[1] & garbageTruckSouth_location = 1 & !crossing) -> (next(garbageTruckSouth_location) = 2);
gar G (!garbageCansSouth[2] & garbageTruckSouth_location = 2) -> (next(garbageTruckSouth_location) = 3);
gar G (!garbageCansSouth[3] & garbageTruckSouth_location = 3) -> (next(garbageTruckSouth_location) = 4);

//use weights to induce north truck to go clean, when cans are full
define at_least_one_can_full_north := 
	garbageCansNorth[0] | garbageCansNorth[1] | garbageCansNorth[2] | garbageCansNorth[3];
	
weight -1
	at_least_one_can_full_north & garbageTruckNorth_location = N;

weight 1 
	!(garbageTruckNorth_location = N) & at_least_one_can_full_north;
	
//use trigger to enforce south truck to wait if no can is full.
define at_least_one_can_full_south := 
	garbageCansSouth[0] | garbageCansSouth[1] | garbageCansSouth[2] | garbageCansSouth[3];
	
gar trig [true]*[!at_least_one_can_full_south] |=> [garbageTruckSouth_location = N]+;
	

//***Light Guarantees***


//*** not in energy saving mode ***
/*gar G (dayTime=NIGHT & !energyEfficiencyMode)-> (lightNorth & lightSouth);
gar G (dayTime=DAY) -> (!lightNorth & !lightSouth);*/
define all_lights_off := (!lights[0] & !lights[1] & !lights[2] & !lights[3] & !lights[4] & !lights[5]);
define all_lights_on := (lights[0] & lights[1] & lights[2] & lights[3] & lights[4] & lights[5]);
gar alw (((dayTime=NIGHT) & !energyEfficiencyMode) -> all_lights_on);
gar alw ((dayTime=DAY) -> all_lights_off);


//*** in energy saving mode***
/*gar G (!sidewalkNorth & energyEfficiencyMode) -> !lightNorth; 
gar G (!sidewalkSouth & energyEfficiencyMode)-> !lightSouth;

gar G ((dayTime= NIGHT) & sidewalkNorth & energyEfficiencyMode) -> lightNorth; 
gar G ((dayTime= NIGHT) & sidewalkSouth & energyEfficiencyMode) -> lightSouth;*/


predicate energyEfficientNorthLightOFF(Int(0..(2)) i):
	(((dayTime = NIGHT) & energyEfficiencyMode & !pedestrians[i] & !pedestrians[i+1]) -> !lights[i]);
gar alw energyEfficientNorthLightOFF(0);
gar alw energyEfficientNorthLightOFF(1);
gar alw energyEfficientNorthLightOFF(2);
predicate energyEfficientSouthLightOFF(Int(3..(5)) i):
	(((dayTime = NIGHT) & energyEfficiencyMode & !pedestrians[i+1] & !pedestrians[i+2]) -> !lights[i]);
gar alw energyEfficientSouthLightOFF(3);
gar alw energyEfficientSouthLightOFF(4);
gar alw energyEfficientSouthLightOFF(5); 
/*
gar alw (((dayTime = NIGHT) & energyEfficiencyMode & !pedestrians[0] & !pedestrians[1]) -> !lights[0]);
gar alw (((dayTime = NIGHT) & energyEfficiencyMode & !pedestrians[1] & !pedestrians[2]) -> !lights[1]);
gar alw (((dayTime = NIGHT) & energyEfficiencyMode & !pedestrians[2] & !pedestrians[3]) -> !lights[2]);
gar alw (((dayTime = NIGHT) & energyEfficiencyMode & !pedestrians[4] & !pedestrians[5]) -> !lights[3]);
gar alw (((dayTime = NIGHT) & energyEfficiencyMode & !pedestrians[5] & !pedestrians[6]) -> !lights[4]);
gar alw (((dayTime = NIGHT) & energyEfficiencyMode & !pedestrians[6] & !pedestrians[7]) -> !lights[5]);*/

predicate energyEfficientNorthLightON(Int(0..(2)) i):
	(((dayTime = NIGHT) & (pedestrians[i] | pedestrians[i+1]) & energyEfficiencyMode) -> lights[i]);
gar alw energyEfficientNorthLightON(0);
gar alw energyEfficientNorthLightON(1);
gar alw energyEfficientNorthLightON(2);
predicate energyEfficientSouthLightON(Int(3..(5)) i):
	(((dayTime = NIGHT) & (pedestrians[i+1] | pedestrians[i+2]) & energyEfficiencyMode) -> lights[i]);
gar alw energyEfficientSouthLightON(3);
gar alw energyEfficientSouthLightON(4);
gar alw energyEfficientSouthLightON(5);
/*
gar alw (((dayTime = NIGHT) & (pedestrians[0] | pedestrians[1]) & energyEfficiencyMode) -> lights[0]);
gar alw (((dayTime = NIGHT) & (pedestrians[1] | pedestrians[2]) & energyEfficiencyMode) -> lights[1]);
gar alw (((dayTime = NIGHT) & (pedestrians[2] | pedestrians[3]) & energyEfficiencyMode) -> lights[2]);
gar alw (((dayTime = NIGHT) & (pedestrians[4] | pedestrians[5]) & energyEfficiencyMode) -> lights[3]);
gar alw (((dayTime = NIGHT) & (pedestrians[5] | pedestrians[6]) & energyEfficiencyMode) -> lights[4]);
gar alw (((dayTime = NIGHT) & (pedestrians[6] | pedestrians[7]) & energyEfficiencyMode) -> lights[5]);*/

//old light logic with weights
/* 
gar G sidewalkNorth -> lightNorth;
gar G sidewalkSouth -> lightSouth;
gar GF !lightNorth;   //not needed because there is GF on sidewalk
gar GF !lightSouth;
gar G !sidewalkNorth -> !lightNorth; 
gar G !sidewalkSouth-> !lightSouth;
*/

/*weight -1
	lightNorth;
weight -1
	lightSouth;
weight 1
	lightNorth & sidewalkNorth;
weight 1
	lightSouth & sidewalkSouth;*/
