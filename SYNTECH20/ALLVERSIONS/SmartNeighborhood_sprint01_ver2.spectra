//version with counter for garbage trucks

spec SmartNeighborhood_sprint1_ver2

//***Environment controlled input variables (sensors)***
define N := 4;
define crosswalkLoc := 1; //between can 1 an 2.
env boolean sidewalkNorth;
env boolean sidewalkSouth;
env boolean crossingCrosswalkNS;
//env boolean crossingCrosswalkSN;
env boolean[N] garbageCansNorth;
env boolean[N] garbageCansSouth;



//***System controlled output variables (lights)***
sys boolean isCleaningN;
sys boolean isCleaningS;
sys boolean lightNorth;
sys boolean lightSouth;
sys Int(0..N) garbageTruckNorth_location; //location N means not on the street.
sys Int(0..N) garbageTruckSouth_location;


//***Initial assumptions***
//all pedestrian areas start empty
asm !sidewalkNorth & !sidewalkSouth & !crossingCrosswalkNS; //& !crossingCrosswalkSN;
asm all_cans_start_empty:
	forall i in Int(0..(N-1)). (!garbageCansNorth[i] & !garbageCansSouth[i]);


//***Assumptions on pedestrian walking routes***
asm G sidewalkNorth -> next(crossingCrosswalkNS);
asm G crossingCrosswalkNS -> next(sidewalkSouth);
//asm G sidewalkSouth -> next(crossingCrosswalkSN);
//asm G crossingCrosswalkSN -> next(sidewalkNorth);
asm GF !sidewalkNorth;
asm GF !sidewalkSouth;
asm GF !crossingCrosswalkNS; //& !crossingCrosswalkSN;


//***Assumptions on garbage cans***

//Eventually always each can will be full:
asm GF garbageCansNorth[0];
asm GF garbageCansSouth[0];
asm GF garbageCansNorth[1];
asm GF garbageCansSouth[1];
asm GF garbageCansNorth[2];
asm GF garbageCansSouth[2];
asm GF garbageCansNorth[3];
asm GF garbageCansSouth[3];

//if truck is at can i, and it's cleaning, then the can will be empty on next stage.
asm G forall i in Int(0..(N-1)). ((garbageTruckNorth_location = i) & garbageCansNorth[i] & isCleaningN) -> next(!garbageCansNorth[i]);
asm G forall i in Int(0..(N-1)). ((garbageTruckSouth_location = i) & garbageCansSouth[i] & isCleaningS) -> next(!garbageCansSouth[i]);


define crossing := crossingCrosswalkNS; //| crossingCrosswalkSN;	

//***Initial Guarantees***
gar !lightNorth & !lightSouth;
gar garbageTruckNorth_location = N;
gar garbageTruckSouth_location = N;
gar !isCleaningN;
gar !isCleaningS;
//gar noTruckNorth & noTruckSouth;

//***truck Guarantees***
//If truck is before crosswalk, and someone is crossing, then it won't move
gar G (crossing & garbageTruckNorth_location = crosswalkLoc) ->
    next(garbageTruckNorth_location = crosswalkLoc);  //maybe monitor?
gar G (crossing & garbageTruckSouth_location = crosswalkLoc) ->
    next(garbageTruckSouth_location = crosswalkLoc); 

//Eventually always, the truck will come to clean all full cans.
gar GF garbageCansNorth[0] & garbageTruckNorth_location = 0 & isCleaningN;
gar GF garbageCansNorth[1] & garbageTruckNorth_location = 1 & isCleaningN;
gar GF garbageCansNorth[2] & garbageTruckNorth_location = 2 & isCleaningN;
gar GF garbageCansNorth[3] & garbageTruckNorth_location = 3 & isCleaningN;

gar GF garbageCansSouth[0] & garbageTruckSouth_location = 0 & isCleaningS;
gar GF garbageCansSouth[1] & garbageTruckSouth_location = 1 & isCleaningS;
gar GF garbageCansSouth[2] & garbageTruckSouth_location = 2 & isCleaningS;
gar GF garbageCansSouth[3] & garbageTruckSouth_location = 3 & isCleaningS;

//Garbage trucks can only move one can forward, or stay in place.
gar G (garbageTruckNorth_location != N) -> (next(garbageTruckNorth_location) = garbageTruckNorth_location | next(garbageTruckNorth_location) = garbageTruckNorth_location + 1);
gar G (garbageTruckSouth_location != N) -> (next(garbageTruckSouth_location) = garbageTruckSouth_location | next(garbageTruckSouth_location) = garbageTruckSouth_location + 1);

//Trucks not on road, can only appear at can 0.
gar G garbageTruckNorth_location = N -> (next(garbageTruckNorth_location) = 0 | next(garbageTruckNorth_location) = N);
gar G garbageTruckSouth_location = N -> (next(garbageTruckSouth_location) = 0 | next(garbageTruckSouth_location) = N);

//Truck will always eventually move
/*gar GF garbageTruckNorth_location = 0;
gar GF garbageTruckNorth_location = 1;
gar GF garbageTruckNorth_location = 2;
gar GF garbageTruckNorth_location = 3;
gar GF garbageTruckNorth_location = 4;
gar GF garbageTruckSouth_location = 0;
gar GF garbageTruckSouth_location = 1;
gar GF garbageTruckSouth_location = 2;
gar GF garbageTruckSouth_location = 3;
gar GF garbageTruckSouth_location = 4;*/

//Cleaning makes trucks wait one turn in place
gar G (isCleaningN & garbageTruckNorth_location != N) -> next(garbageTruckNorth_location) = garbageTruckNorth_location & next(isCleaningN) = false;
gar G (isCleaningS & garbageTruckNorth_location != N) -> next(garbageTruckNorth_location) = garbageTruckNorth_location & next(isCleaningS) = false;

//Eventually always, trucks will not be on the road.
gar GF garbageTruckNorth_location = N;
gar GF garbageTruckSouth_location = N;


//***Light Guarantees***
gar G sidewalkNorth -> lightNorth;
gar G sidewalkSouth -> lightSouth;
gar GF !lightNorth;
gar GF !lightSouth;



