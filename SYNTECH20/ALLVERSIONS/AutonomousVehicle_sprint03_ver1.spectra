import "../DwyerPatterns.spectra"

module AutonomousVehicle

// *********************************
// ********** Definitions **********
// *********************************
define 
	drive := speed > 0;
	driveFast := speed >= 3;
	
define
	numberOfLanes := 4;
	
// *********************************
// ***** Environment Variables *****
// *********************************
env boolean[numberOfLanes] pedestrianInLane;
env boolean[numberOfLanes] slowCarInLane;
env boolean[numberOfLanes] greenLightInLane;
env boolean[numberOfLanes] obstacleInLane;

env boolean crosswalk;
env boolean gasStation;

// *********************************
// ******* System Variables ********
// *********************************
type Lane = {First, Second, Third, Fourth};
sys Lane currentLane;
sys Int(0..5) speed;
sys boolean lowGas;
sys boolean atGasStation;

// *********************************
// ********** Predicates ***********
// *********************************
predicate carShouldStop(boolean greenLight, boolean pedestrian):
	pedestrian | !greenLight;

predicate carCanDriveInLane(boolean greenLight, boolean pedestrian, boolean obstacle, boolean car):
	greenLight & !pedestrian & !obstacle & !car;	

predicate carCanDriveInFirstLane():
	greenLightInLane[0] & !pedestrianInLane[0] & !obstacleInLane[0] & !slowCarInLane[0];

predicate carCanDriveInSecondLane():
	greenLightInLane[1] & !pedestrianInLane[1] & !obstacleInLane[1] & !slowCarInLane[1];

predicate carCanDriveInThirdLane():
	greenLightInLane[2] & !pedestrianInLane[2] & !obstacleInLane[2] & !slowCarInLane[2];

predicate carCanDriveInFourthLane():
	greenLightInLane[3] & !pedestrianInLane[3] & !obstacleInLane[3] & !slowCarInLane[3];		
	
// *********************************
// ********** Assumptions **********
// *********************************
// Each lane is free infinitely often
asm GF carCanDriveInLane(greenLightInLane[0], pedestrianInLane[0], obstacleInLane[0], slowCarInLane[0]);
asm GF carCanDriveInLane(greenLightInLane[1], pedestrianInLane[1], obstacleInLane[1], slowCarInLane[1]);
asm GF carCanDriveInLane(greenLightInLane[2], pedestrianInLane[2], obstacleInLane[2], slowCarInLane[2]);
asm GF carCanDriveInLane(greenLightInLane[3], pedestrianInLane[3], obstacleInLane[3], slowCarInLane[3]);

// There should be a gas station infinitely often
asm GF gasStation;

// If there is an obstacle in a lane, there is a lane without an obstacle to move to in the next step
asm G obstacleInLane[0] -> next(carCanDriveInSecondLane());
asm G obstacleInLane[1] & obstacleInLane[2] -> next(carCanDriveInFirstLane());
asm G obstacleInLane[1] & obstacleInLane[0] -> next(carCanDriveInThirdLane());
asm G obstacleInLane[2] & obstacleInLane[1] -> next(carCanDriveInFourthLane());
asm G obstacleInLane[2] & obstacleInLane[3] -> next(carCanDriveInSecondLane());
asm G obstacleInLane[3] -> next(carCanDriveInThirdLane());

// *********************************
// ********* Guarantees ************
// *********************************
// The car should stop driving if there is a pedestrian or a red light in the current lane
gar G carShouldStop(greenLightInLane[0], pedestrianInLane[0]) & currentLane = First -> !drive;
gar G carShouldStop(greenLightInLane[1], pedestrianInLane[1]) & currentLane = Second -> !drive;
gar G carShouldStop(greenLightInLane[2], pedestrianInLane[2]) & currentLane = Third -> !drive;
gar G carShouldStop(greenLightInLane[3], pedestrianInLane[3]) & currentLane = Fourth -> !drive;

// The car should move to another lane if there is an obstacle in the current lane
gar G (currentLane = First & obstacleInLane[0]) -> next(currentLane) = Second;
gar G (currentLane = Second & obstacleInLane[1] & !carCanDriveInFirstLane()) -> next(currentLane) = Third;
gar G (currentLane = Second & obstacleInLane[1] & !carCanDriveInThirdLane()) -> next(currentLane) = First;
gar G (currentLane = Second & obstacleInLane[1]) -> next(currentLane) != Second;
gar G (currentLane = Third & obstacleInLane[2] & !carCanDriveInFourthLane()) -> next(currentLane) = Second;
gar G (currentLane = Third & obstacleInLane[2] & !carCanDriveInSecondLane()) -> next(currentLane) = Fourth;
gar G (currentLane = Third & obstacleInLane[2]) -> next(currentLane) != Third;
gar G (currentLane = Fourth & obstacleInLane[3]) -> next(currentLane) = Third;

// The car should slow or move to another lane if there is a slow car in the current lane
gar G (currentLane = First & slowCarInLane[0] & carCanDriveInSecondLane()) -> next(currentLane) = Second;
gar G (currentLane = First & slowCarInLane[0] & !carCanDriveInSecondLane()) -> !driveFast;

gar G (currentLane = Second & slowCarInLane[1] & !carCanDriveInFirstLane() & carCanDriveInThirdLane()) -> next(currentLane) = Third;
gar G (currentLane = Second & slowCarInLane[1] & !carCanDriveInThirdLane() & carCanDriveInFirstLane()) -> next(currentLane) = First;
gar G (currentLane = Second & slowCarInLane[1] & carCanDriveInFirstLane() & carCanDriveInThirdLane()) -> next(currentLane) != Second;
gar G (currentLane = Second & slowCarInLane[1] & !carCanDriveInFirstLane() & !carCanDriveInThirdLane()) -> !driveFast;

gar G (currentLane = Third & slowCarInLane[2] & !carCanDriveInSecondLane() & carCanDriveInFourthLane()) -> next(currentLane) = Fourth;
gar G (currentLane = Third & slowCarInLane[2] & !carCanDriveInFourthLane() & carCanDriveInSecondLane()) -> next(currentLane) = Second;
gar G (currentLane = Third & slowCarInLane[2] & carCanDriveInSecondLane() & carCanDriveInFourthLane()) -> next(currentLane) != Third;
gar G (currentLane = Third & slowCarInLane[2] & !carCanDriveInSecondLane() & !carCanDriveInFourthLane()) -> !driveFast;

gar G (currentLane = Fourth & slowCarInLane[3] & carCanDriveInThirdLane()) -> next(currentLane) = Third;
gar G (currentLane = Fourth & slowCarInLane[3] & !carCanDriveInThirdLane()) -> !driveFast;

// The car should slow if there is a crosswalk or if the gas is low
gar G crosswalk | lowGas -> !driveFast;

// The car should get to a gas station when the gas is low, while gas station are in the rightmost lane only
gar G lowGas & gasStation & currentLane = Fourth <-> atGasStation;
gar pRespondsToS(lowGas, atGasStation);

// The car should stop when its in a gas station
gar G atGasStation -> !drive;

// The car should be in a free lane infinitely often
gar carCanDriveInCurrentLane:
	GF (currentLane = First & carCanDriveInLane(greenLightInLane[0], pedestrianInLane[0], obstacleInLane[0], slowCarInLane[0])) |
	   (currentLane = Second & carCanDriveInLane(greenLightInLane[1], pedestrianInLane[1], obstacleInLane[1], slowCarInLane[1])) |
	   (currentLane = Third & carCanDriveInLane(greenLightInLane[2], pedestrianInLane[2], obstacleInLane[2], slowCarInLane[2])) |
   	   (currentLane = Fourth & carCanDriveInLane(greenLightInLane[3], pedestrianInLane[3], obstacleInLane[3], slowCarInLane[3]));
	   
// The car shouldn't stop when it is able to drive	   
gar G carCanDriveInLane(greenLightInLane[0], pedestrianInLane[0], obstacleInLane[0], slowCarInLane[0]) & currentLane = First -> drive;
gar G carCanDriveInLane(greenLightInLane[1], pedestrianInLane[1], obstacleInLane[1], slowCarInLane[1]) & currentLane = Second -> drive;
gar G carCanDriveInLane(greenLightInLane[2], pedestrianInLane[2], obstacleInLane[2], slowCarInLane[2]) & currentLane = Third -> drive;
gar G carCanDriveInLane(greenLightInLane[3], pedestrianInLane[3], obstacleInLane[3], slowCarInLane[3]) & currentLane = Fourth -> drive;

// The car shouldn't jump over a lane
gar G currentLane = First -> next(currentLane) = First | next(currentLane) = Second;
gar G currentLane = Third -> next(currentLane) != First;
gar G currentLane = Second -> next(currentLane) != Fourth;
gar G currentLane = Fourth -> next(currentLane) = Fourth | next(currentLane) = Third;