spec ParkingLot2
define NUMBEROFSPOTS := 5;

//-----------Environment variables
 
// there can only be one car at the lot entrance - #2
env boolean carInEntrance;
env boolean [NUMBEROFSPOTS] carWantsToLeave;
env {STANDARD, HANDICAP} carType;
 
//-----------System variables
 
sys boolean [NUMBEROFSPOTS] spotIsTaken; // spotIsTaken[0] and spotIsTaken[1] are handicap spots
sys boolean gateIsOpen;
sys boolean resetHours;
sys {STANDARD, HANDICAP} sysCarType;
sys {OPEN, CLOSED} mode;
//-----------Assumptions
 
// a car (standard or handicap) will eventually arrive at the parking lot - #6
asm GF carInEntrance;
asm GF carType = STANDARD;
asm GF carType = HANDICAP;
 
// a parked car will eventually leave the parking lot - #7    // repetitions due to spectra's limitations
asm GF carWantsToLeave[0];
asm GF carWantsToLeave[1];
asm GF carWantsToLeave[2];
asm GF carWantsToLeave[3];
asm GF carWantsToLeave[4];
//asm GF carWantsToLeave[5];
//asm GF carWantsToLeave[6];
//asm GF carWantsToLeave[7];
//asm GF carWantsToLeave[8];
//asm GF carWantsToLeave[9];

// A car at lot entrance stays there until entering the lot - #4
asm carDoesntDisappear:
    G carInEntrance & !gateIsOpen -> next(carInEntrance);

// A car doesn't change its type - #14
asm carTypeDoesntChange:
    G carInEntrance & !gateIsOpen -> next(carType) = carType;
 
//-----------Guarantees

gar initiallySpotsNonTaken:
    forall i in Int(0..(NUMBEROFSPOTS-1)). (spotIsTaken[i] = false);
 
// A car can only park in an empty spot - #3, #9
gar G gateIsOpen <-> (((mode = OPEN) & carInEntrance & (carType = STANDARD) & (exists i in Int(2..(NUMBEROFSPOTS-1)). spotIsTaken[i] = false)) | ((mode = OPEN) & carInEntrance & (carType = HANDICAP) & (exists i in Int(0..(NUMBEROFSPOTS-1)). spotIsTaken[i] = false)));

// a parking spot with a car is considered taken, otherwise non taken - #5, #8, #10
// standard cars can only park is standard spots, and handicap cars can park in any spot - #15, #16
gar G next(spotIsTaken[0]) = ((gateIsOpen & (carType = HANDICAP) & !spotIsTaken[0]) | (spotIsTaken[0] & !carWantsToLeave[0]));
gar G next(spotIsTaken[1]) = ((gateIsOpen & (carType = HANDICAP) & spotIsTaken[0] & !spotIsTaken[1]) | (spotIsTaken[1] & !carWantsToLeave[1]));


gar G next(spotIsTaken[2]) = ((gateIsOpen & !spotIsTaken[2] & ((carType = STANDARD) | (carType = HANDICAP & spotIsTaken[0] & spotIsTaken[1]))) | (spotIsTaken[2] & !carWantsToLeave[2]));

gar G next(spotIsTaken[3]) = ((gateIsOpen & !spotIsTaken[3] & spotIsTaken[2] & ((carType = STANDARD) | (carType = HANDICAP & spotIsTaken[0] & spotIsTaken[1]))) | (spotIsTaken[3] & !carWantsToLeave[3]));

gar G next(spotIsTaken[4]) = ((gateIsOpen & !spotIsTaken[4] & spotIsTaken[3] & spotIsTaken[2] & ((carType = STANDARD) | (carType = HANDICAP & spotIsTaken[0] & spotIsTaken[1]))) | (spotIsTaken[4] & !carWantsToLeave[4]));

//gar G next(spotIsTaken[5]) = ((gateIsOpen & !spotIsTaken[5] & spotIsTaken[4] & spotIsTaken[3] & spotIsTaken[2] & ((carType = STANDARD) | (carType = HANDICAP & spotIsTaken[0] & spotIsTaken[1]))) | (spotIsTaken[5] & !carWantsToLeave[5]));

//gar G next(spotIsTaken[6]) = ((gateIsOpen & !spotIsTaken[6] & spotIsTaken[5] & spotIsTaken[4] & spotIsTaken[3] & spotIsTaken[2] & ((carType = STANDARD) | (carType = HANDICAP & spotIsTaken[0] & spotIsTaken[1]))) | (spotIsTaken[6] & !carWantsToLeave[6]));

//gar G next(spotIsTaken[7]) = ((gateIsOpen & !spotIsTaken[7] & spotIsTaken[6] & spotIsTaken[5] & spotIsTaken[4] & spotIsTaken[3] & spotIsTaken[2] & ((carType = STANDARD) | (carType = HANDICAP & spotIsTaken[0] & spotIsTaken[1]))) | (spotIsTaken[7] & !carWantsToLeave[7]));

// gar G next(spotIsTaken[8]) = ((gateIsOpen & !spotIsTaken[8] & spotIsTaken[7] & spotIsTaken[6] & spotIsTaken[5] & spotIsTaken[4] & spotIsTaken[3] & spotIsTaken[2] & ((carType = STANDARD) | (carType = HANDICAP & spotIsTaken[0] & spotIsTaken[1]))) | (spotIsTaken[8] & !carWantsToLeave[8]));

//gar G next(spotIsTaken[9]) = ((gateIsOpen & !spotIsTaken[9] & spotIsTaken[8] & spotIsTaken[7] & spotIsTaken[6] & spotIsTaken[5] & spotIsTaken[4] & spotIsTaken[3] & spotIsTaken[2] & ((carType = STANDARD) | (carType = HANDICAP & spotIsTaken[0] & spotIsTaken[1]))) | (spotIsTaken[9] & !carWantsToLeave[9]));



// a counter to calculate the operating hours of the parking lot
counter hours(0..12){
    hours = 0;
    inc: !resetHours;
    reset: resetHours;
    overflow: false;
}

gar G resetHours = (hours = 12);
 
// the parking lot is open during hours 0-7. this means the cars will always be open eventually - #11, #13
gar G (hours < 8) -> (mode = OPEN);
 
// the parking lot is open during hours 8-12 - #12
gar G (hours >= 8) -> (mode = CLOSED);

// copying the carType value into a system variable, so the GUI can have access to it
gar G sysCarType = carType;