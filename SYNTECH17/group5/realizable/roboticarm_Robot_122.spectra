module Robot 


env Color s0;
env Color s1;
env Color s2;
env Color s3;
env Color s4;
env Color s5;

env Task task;


sys Mode mode;
sys Int(0..5) from;
sys Int(0..5) to;


/*
 * EMPTY denotes an empty station
 * NOT denotes a not exists station. For example, if there're only 4 stations, then the stations[4] = NOT, and stations[5] = NOT
 * 
 */
type Color = {RED, GREEN, BLUE, EMPTY, NOT};

/*
 * During the INIT mode, the robot scans the stations, and checks how many stations there're, and what are their balls' colors
 * MOVE moves the ball from 'from' to 'to', assuming 'to' is an empty station
 * NOTHING means that the robot stands and does not move, and just does nothing
 * 
 * Notice that MOVE essentially swaps between 'from' and 'to',
 * as after MOVE 'from' points to the empty place that previously was in the place 'to' points to,
 * and 'to' points to the ball that previously was in the place pointed to by 'from'
 */
 
type Mode = {MOVE, NOTHING, INIT};

/*
 * The task that should be done now.
 * SORT task sorts the stations using mode = MOVE, and then satisfies mode = NOTHING
 * EXCHANGE task exchanges two different colored balls using mode = MOVE
 *  
 */
type Task = {SORT, EXCHANGE};


gar mode = INIT;

aux boolean initDone;
gar !initDone;
gar G next(initDone) = (mode = INIT | initDone);

//INIT happens only ones
gar G initDone -> mode != INIT;




asm sortingAssumptions;

/*
 * The combination of the second two gars yields that the array is finally sorted,
 * and then it stays sorted as long as task = SORT
 */
gar
  GF (task = SORT) -> sorted;
  
gar
  G (task = SORT & sorted & mode != INIT) -> mode = NOTHING; 




gar
  G (task = EXCHANGE & initDone) -> (mode = MOVE & incrementFrom);

      
        
   

gar moveRequirements:
  G (mode = MOVE) -> (fromExists & toExists & toIsEmpty & from != to);

 
 
asm saveOnInit:
  G (mode = INIT) -> saveAll;

asm saveOnNothing:
  G (mode = NOTHING) -> saveAll;

asm saveOnMove:
  G (mode = MOVE) -> (onExchangeSave & swap);

  




/*
 * some defines
 * 
 */
 
 define
  
  //all the colors stay in their positions
  saveAll :=
    (next(s0) = s0) &
    (next(s1) = s1) &
    (next(s2) = s2) &
    (next(s3) = s3) &
    (next(s4) = s4) &
    (next(s5) = s5) ;
    
  //when we swap between 'from' and 'to' we need to save the values of all the places except 'from' and 'to' 
  onExchangeSave :=
   
    (((from != 0) & (to!=0)) -> ((next(s0) = s0))) &
    (((from != 1) & (to!=1)) -> ((next(s1) = s1))) &
    (((from != 2) & (to!=2)) -> ((next(s2) = s2))) &
    (((from != 3) & (to!=3)) -> ((next(s3) = s3))) &
    (((from != 4) & (to!=4)) -> ((next(s4) = s4))) &
    (((from != 5) & (to!=5)) -> ((next(s5) = s5))) ;
  
//given that from = fromVal, it iterates over all possible values of 'to'
//and when its value is found, it swaps the values of 'from' and 'to'
predicate swapAux(Int(0..5) fromVal, Color fromColor):
  
  (((from = fromVal) & (to = 0)) -> (next(fromColor) = s0 & next(s0) = fromColor)) &
  (((from = fromVal) & (to = 1)) -> (next(fromColor) = s1 & next(s1) = fromColor)) &
  (((from = fromVal) & (to = 2)) -> (next(fromColor) = s2 & next(s2) = fromColor)) &
  (((from = fromVal) & (to = 3)) -> (next(fromColor) = s3 & next(s3) = fromColor)) &
  (((from = fromVal) & (to = 4)) -> (next(fromColor) = s4 & next(s4) = fromColor)) &
  (((from = fromVal) & (to = 5)) -> (next(fromColor) = s5 & next(s5) = fromColor)) ;

 
define
/*
 * Iterates over all the possible values of 'from', and performs swapAux
 * which, in turn, iterates over all possible values of 'to',
 * and performs swap if the correct pair of ('from', 'to') is found 
 * 
 */
  swap :=
    swapAux(0, s0) &
    swapAux(1, s1) &
    swapAux(2, s2) &
    swapAux(3, s3) &
    swapAux(4, s4) &
    swapAux(5, s5) ;

/*
 * The stations are ordered such that the non-existing stations are to the end
 * 
 * This is needed as otherwise, sorting were not possible,
 * as sorting never moves non-existing stations, and in sorted array,
 * the non-existing ones should be to the end
 * 
 * This is implemented in the following way:
 * if something does not exist,
 * then its successor must also not exist,
 * and so does its successor, and so forth.
 *  
 */
  firstStationsExist :=
    ((s0 = NOT) -> (s1 = NOT)) &
    ((s1 = NOT) -> (s2 = NOT)) &
    ((s2 = NOT) -> (s3 = NOT)) &
    ((s3 = NOT) -> (s4 = NOT)) &
    ((s4 = NOT) -> (s5 = NOT)) ;
    
    
 
  somethingEmpty := 
 
    (s0 = EMPTY) |
    (s1 = EMPTY) |
    (s2 = EMPTY) |
    (s3 = EMPTY) |
    (s4 = EMPTY) |
    (s5 = EMPTY) ;
  
  
  toIsEmpty :=
    ((to = 0) -> (s0 = EMPTY)) &
    ((to = 1) -> (s1 = EMPTY)) &
    ((to = 2) -> (s2 = EMPTY)) &
    ((to = 3) -> (s3 = EMPTY)) &
    ((to = 4) -> (s4 = EMPTY)) &
    ((to = 5) -> (s5 = EMPTY)) ;
  
  
  
   sorted :=
      (s0 <= s1) &
      (s1 <= s2) &
      (s2 <= s3) &
      (s3 <= s4) &
      (s4 <= s5) ;
   

//asserts that the station in this index exists
predicate exists(Int(0..5) index):
  
  ((index = 0) -> (s0 != NOT)) &
  ((index = 1) -> (s1 != NOT)) &
  ((index = 2) -> (s2 != NOT)) &
  ((index = 3) -> (s3 != NOT)) &
  ((index = 4) -> (s4 != NOT)) &
  ((index = 5) -> (s5 != NOT)) ;

define

   fromExists :=
      exists(from);
      
   toExists :=
      exists(to);
   
   somethingExists :=
      (s0 != NOT) |
      (s1 != NOT) |
      (s2 != NOT) |
      (s3 != NOT) |
      (s4 != NOT) |
      (s5 != NOT) ;
      
   
   
//all of the stations (excluding empty and non-existing stations)
//contain balls are colored in 'color' (the input color) 
predicate allEqual(Color color):
  ((s0 = color) | (s0 = EMPTY) | (s0 = NOT)) &
  ((s1 = color) | (s1 = EMPTY) | (s1 = NOT)) &
  ((s2 = color) | (s2 = EMPTY) | (s2 = NOT)) &
  ((s3 = color) | (s3 = EMPTY) | (s3 = NOT)) &
  ((s4 = color) | (s4 = EMPTY) | (s4 = NOT)) &
  ((s5 = color) | (s5 = EMPTY) | (s5 = NOT)) ;
  
define
      
   equal :=
      allEqual(RED)   |
      allEqual(GREEN) |
      allEqual(BLUE)  ;
   
   /*
    * These assumptions are needed as in the general case the generated automaton
    * requires more heap memory than the standard heap memory in Eclipse.
    * So, we need to focus on special cases.
    * 
    */
   
   extraAssumptions :=
//      (s0 = BLUE | s0 = RED) &
//      (s1 = BLUE | s1 = RED) &
//      (s2 = BLUE | s2 = RED) &
//      (s3  = EMPTY) &
      (s4  = NOT)   &
      (s5  = NOT);
 
   
   
  sortingAssumptions :=
    extraAssumptions & somethingEmpty & firstStationsExist & somethingExists & !equal;
 
 
 /*
   * We iterate over all existing values of 'from' in a cyclic manner
   * 
   * Notice that when !exists(from+1), then also !exists(from+2), etc.,
   * so we we're in the last existing value
   * 
   * Notice also that we also may pass through from=EMPTY, or from=to
   * 
   */
   
  
  incrementFrom :=
    ( ((from != 5) & exists(from+1)) -> next(from) = from+1) &
    (!((from != 5) & exists(from+1)) -> next(from) = 0) ;

//asm G (task = SORT & !sorted) -> next(task) = SORT;
//asm G (task = EXCHANGE & next(task) != EXCHANGE) -> from = 1;