/*
 * Auto-generated Spectra file
 */
 //
 // lane setup:
 // right side of lane should be BLACK
 // left side of lane should be WHITE
import "../patterns/DwyerPatterns.spectra"
  
module ConvoyCarSpec     
     
env Int(0..10) sense;
env Int(0..13) color;
env Int(0..1) rightColor;
env Int(0..1) leftColor;
sys Int(0..4) mLeft;
sys Int(0..4) mRight;
sys Int(0..1) beep;

aux boolean accelerating;
aux boolean slowingDown;

define
  stopping := mLeft = 0 & mRight = 0;
  turning := mLeft != mRight;
  minDist := 0;
  maxDist := 10;
  inRange := (minDist < sense) & (sense < maxDist);
  inLane := rightColor = black & leftColor = white;
  tooClose := sense <= minDist;
  farFromNextCar := sense >= maxDist;
  //LANE "enum":
  white := 1;
  black := 0;
  turningLeft := mLeft < mRight;
  turningRight := mLeft > mRight;

guarantee beeping:
  G (!stopping <-> beep = 1);
guarantee initialization:
  stopping; //& !accelerating & !slowingDown;
 
guarantee
  G !inLane -> next(turning) | next(stopping);
guarantee accel:
  G (accelerating -> next(mLeft = mRight) & (next(mLeft) - mLeft = 1 | (mLeft = 4 & next(mLeft)=4) ));
  
guarantee slowDwn:
  G (slowingDown -> next(mLeft = mRight) & ((mLeft = 0 & next(mLeft)=0) | mLeft - next(mLeft) = 1 ));

guarantee smoothnessLeft:
  G ((-1 <= next(mLeft) - mLeft) & (next(mLeft) - mLeft <= 1));
guarantee smoothnessRight:
  G ((-1 <= next(mRight) - mRight) & (next(mRight) - mRight <= 1));
  
monitor Int(0..10) lastDist{
  lastDist = sense;
  G next(lastDist) = sense;
}

guarantee accelerateIfClear:
  G (farFromNextCar & inLane) -> (accelerating);

guarantee
  G ((inRange & (lastDist > sense) & inLane) -> (slowingDown));

guarantee
  G ((inRange & (lastDist < sense) & inLane) -> (accelerating));

guarantee
  G ((inRange & (lastDist = sense) & inLane) -> (mLeft = next(mLeft)));

guarantee convoy:
  GF (inRange | farFromNextCar | (tooClose & stopping));
  
guarantee
  G (tooClose -> (slowingDown));
  
guarantee stayInLane:
  GF (inLane);
  
assumption
  G (inRange -> (!farFromNextCar & !tooClose));
assumption
  G (tooClose -> !farFromNextCar & !inRange);
assumption
  G (farFromNextCar -> !inRange & !tooClose);

assumption
  pRespondsToS(turningRight SINCE (rightColor = white), inLane);
assumption
  pRespondsToS(turningLeft SINCE (leftColor = black), inLane);
//assumption initDist:
//  sense >= minDist;
