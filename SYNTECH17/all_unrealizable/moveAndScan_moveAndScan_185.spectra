import "../patterns/DwyerPatterns.spectra"
module moveAndScan    

env Int(0..5) frontSense;
env Int(0..5) sideSense;
env Status status; 
env SideStatus sideStatus;
env ColorCmd color;

sys MotorCmd driveMotor;
sys MotorCmd steeringMotor;
sys Int(0..5) velocity;
sys Mode mode;


type MotorCmd = {FWD, STOP, BWD, HARD_LEFT, LIGHT_LEFT, STRAIGHT, LIGHT_RIGHT, HARD_RIGHT};
type Mode = {SEARCHING, SCANNING, PARKING, PARKED};
type Status = {PARALLEL, REVERSE, NONE};
type SideStatus = {MIN_PARALLEL , MIN_REVERSE, NONE};
type ColorCmd = {BLACK , GREEN , BLUE};


define
  stopping := driveMotor = STOP & velocity = 0;
  forwarding := driveMotor = FWD; 
  reversing := driveMotor = BWD ;
  left := steeringMotor = LIGHT_LEFT | steeringMotor = HARD_LEFT;
  right := steeringMotor = LIGHT_RIGHT | steeringMotor = HARD_RIGHT;
  light_left_fwd := steeringMotor = LIGHT_LEFT & driveMotor = FWD;
  light_left_bwd := steeringMotor = LIGHT_LEFT & driveMotor = BWD;
  hard_left_fwd := steeringMotor = HARD_LEFT & driveMotor = FWD;
  hard_left_bwd := steeringMotor = HARD_LEFT & driveMotor = BWD;
  light_right_fwd := steeringMotor = LIGHT_RIGHT & driveMotor = FWD;
  light_right_bwd := steeringMotor = LIGHT_RIGHT & driveMotor = BWD;
  hard_right_fwd := steeringMotor = HARD_RIGHT & driveMotor = FWD;
  hard_right_bwd := steeringMotor = HARD_RIGHT & driveMotor = BWD;
  getCloser := (PREV(sideSense = 5) & (sideSense < 5)) | (PREV(sideSense = 4) & (sideSense < 4)) | (PREV(sideSense = 3) & (sideSense < 3)) | (PREV(sideSense = 2) & (sideSense < 2)) | (PREV(sideSense = 1) & (sideSense < 1));
  sideways := light_left_fwd | light_left_bwd | hard_left_fwd | hard_left_bwd | light_right_fwd | light_right_bwd | hard_right_fwd | hard_right_bwd;
  fwd_turning := (steeringMotor = HARD_LEFT | steeringMotor = HARD_RIGHT | steeringMotor = LIGHT_LEFT | steeringMotor = LIGHT_RIGHT) & forwarding;
  bwd_turning := (steeringMotor = HARD_LEFT | steeringMotor = HARD_RIGHT | steeringMotor = LIGHT_LEFT | steeringMotor = LIGHT_RIGHT) & reversing;

  //gar 
//G mode = SEARCHING &  PREV(senseMotor = SIDE) & sideSense > 2 & status = NONE & frontSense > 2-> next(mode) = SCANNING & senseMotor = SIDE;  
//
//gar
//G mode = SCANNING & sideSense <= 2 -> next(mode) = SEARCHING;
  



guarantee initial:
mode = SEARCHING  & steeringMotor = STRAIGHT & stopping;

//Wall Alignment
gar 
pRespondsToS( ((mode = SEARCHING | mode = SCANNING) & (sideSense > 1)),  sideSense = 1);
 

//steeringMotor options 
gar
G steeringMotor != FWD & steeringMotor != BWD & steeringMotor != STOP;

//drivMotor options
gar
G driveMotor != HARD_LEFT & driveMotor != LIGHT_LEFT & driveMotor != STRAIGHT & driveMotor != LIGHT_RIGHT & driveMotor != HARD_RIGHT;


//While scanning if we are not parking and the frontSense reading is clear enough , keep heading straight and forward
gar
G ((mode = SCANNING) & (status = NONE   | (status = REVERSE & sideStatus = MIN_PARALLEL)) & frontSense > 2) -> (steeringMotor = STRAIGHT & driveMotor = FWD);


//While SEARCHING if the sideSense reading is clear enough, keep heading straight and forward
gar
G ((mode = SEARCHING) & status = NONE & frontSense > 2 & next(frontSense)>2 ) -> (steeringMotor = STRAIGHT & next(driveMotor) = FWD);
//While scanning if the sideSense gets too blocked and we haven't found a parking spot 


//if While scanning there is no enough place to park 
gar
G (mode = SCANNING & sideStatus = NONE & status = NONE) -> (next(mode) = SEARCHING);

//While scanning if the sideStatus reading is clear enough, keep scanning.
gar
G (mode = SCANNING  & status = NONE  & sideStatus != NONE ) -> (next(mode) = SCANNING);

//there is not enough place to park , start SEARCHING again
gar
G (mode = SEARCHING & sideStatus = NONE) -> (next(mode) = SEARCHING);

//start scanning if the sideStatus is sufficiently clear
gar startScanning:
G (mode = SEARCHING & sideStatus != NONE) -> (next(mode) = SCANNING); 

//gar
//G (mode = SCANNING & sideStatus = NONE) -> (next(mode) = SEARCHING);

//Make sure we don't crash while moving forward 
guarantee dontCrashFront:
G (frontSense <= 2) -> ((driveMotor != FWD) | steeringMotor = HARD_LEFT);

//Make sure we don't crash while moving (straight) backward
guarantee dontCrashSide:
G ( sideSense <= 1) -> (steeringMotor = STRAIGHT);

//while stopping the velocity is 0, and vice versa
guarantee speedWhileInStopping:
G driveMotor = STOP <-> velocity = 0;

//Change the speed of the car according to its distance from an obstacle
guarantee speedWhileClear:
G (frontSense = 5 & mode = SEARCHING & !stopping) -> (velocity = 5);
guarantee speedWhileVeryFar:
G (frontSense = 4 & mode = SEARCHING & !stopping ) -> (velocity = 4);
guarantee speedWhileFar:
G (frontSense = 3 & mode = SEARCHING & !stopping) -> (velocity = 3);
guarantee slowSpeed:
G (frontSense = 3 & (mode = SCANNING) & !stopping) -> (velocity = 1);
  


//Once the status changes to PARALLEL or REVERSE and we were scanning, stop
gar reverselPlace:
G  (mode = SCANNING & ((status = REVERSE & sideStatus = MIN_REVERSE) | (status = PARALLEL & sideStatus = MIN_PARALLEL)) ) -> (next(stopping) & (next(mode) = PARKING) & steeringMotor = STRAIGHT & next(steeringMotor) = STRAIGHT);

//gar parallelPlace:
//G  (mode = SCANNING &(status = PARALLEL & sideStatus = MIN_PARALLEL)) <-> (next(stopping) & (next(mode) = PARKING) & steeringMotor = STRAIGHT & next(steeringMotor) = STRAIGHT);

//if side sensor is enough for parallel parking, keep scanning until status is parallel.
gar noMatch:
G  (mode = SCANNING & status = REVERSE & sideStatus = MIN_PARALLEL) -> (next(mode) = SCANNING);

//Always find a parking spot
gar alwaysParkTheCar:
GF (stopping & (status = PARALLEL | status = REVERSE) & mode = PARKING) ;

//gar stayParking:
//G (stopping & mode = PARKING & status !=NONE ) -> (next(stopping)) ;

//The car is not initially parked
assumption notParkedInitially:
status = NONE & frontSense > 2 & sideSense !=0;

//TODO
asm
G (mode = SEARCHING & status = NONE) -> (next(status = NONE));


//while SCANING we will find enough place to park eventually
asm
pRespondsToS(mode = SCANNING, ((status = PARALLEL & sideStatus = MIN_PARALLEL) | (status = REVERSE & sideStatus = MIN_REVERSE)));

//continuousness  of moving backwards
asm
pRespondsToS(driveMotor = BWD, (next(frontSense) = frontSense +1 | next(frontSense) = frontSense));

//continuousness  of moving forward
asm
pRespondsToS(driveMotor = FWD, (next(frontSense) = frontSense -1 | next(frontSense) = frontSense));




//G (driveMotor = BWD & left ) -> (next(driveMotor) = BWD | next(sideSense) = sideSense - 1);
//gar 
//G (driveMotor = FWD & right) -> (next(driveMotor) = FWD | next(sideSense) = sideSense + 1);





//asm
//pRespondsToS(PREV(mode = SCANNING) & mode = PARKING & driveMotor = BWD, sideSense <= 1); 

//Standing still doesn't change a thing 
//asm 
//G ((mode = PARKED & color = GREEN) ) -> ((next(sideSense) =  sideSense) & (next(backSense) = backSense) & ( next(frontSense) =frontSense) );


//asm
//pRespondsToS(stopping, (next(sideSense) =  sideSense) & (next(backSense) = backSense) & ( next(frontSense) =frontSense));

//asm 
//G (stopping & frontSense > 2 & sideSense > 2) -> ((sideSense = next(sideSense)) & (backSense = next(backSense)) & (frontSense = next(frontSense)));


//assumption theWorldRemainsStillWhileStopping:
//G((next(stopping) )-> (sideSense = next(sideSense) & backSense = next(backSense) & frontSense = next(frontSense)));

//Driving backwards and turning left will make our sideSense change (downwards) or remain the same
//asm
//G (driveMotor = BWD & left) -> getCloser;

//Assume that there exists some degree of movement in the environment
//assumption ableToStartSearching:
//pRespondsToS(mode = SEARCHING & !stopping, frontSense > 2 & sideSense > 2);

//TODO
assumption moveAfterStopping:
pRespondsToS(stopping , frontSense > 2 & sideSense >= 2);


//assumption ableToScan:
//GF ((frontSense > 2 & sideSense > 2));

//TODO
assumption notInACage:
GF (frontSense > 2  | sideSense >= 2);


//Once a parking spot has been found it wont move. Hopefully.
asm ParallelparkingSpotsDontDisappear:
G (status = PARALLEL) -> (next(status) = PARALLEL);

//TODO
asm ReverseparkingSpotsDontDisappear:
G (status = REVERSE) -> (next(status) = REVERSE | next(status) = PARALLEL);

//Assume that a parking a large enough parking spot to contain the car exists
assumption aParkingSpotExists:
 GF ((status = PARALLEL & sideStatus = MIN_PARALLEL) | (status = REVERSE & sideStatus = MIN_REVERSE));