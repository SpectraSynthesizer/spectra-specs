import "../patterns/DwyerPatterns.spectra"

module AirportShuttle

env Int(0..3) station;
env boolean atStation;

env boolean pressedStationOne;
env boolean pressedStationTwo;
env boolean pressedStationThree;
env boolean pressedStationFour;

sys MotorCmd motors;
sys boolean[4] shuttleTasks;

type MotorCmd = {FWD, STOP, BWD};

predicate atGivenStation(Int(0..3) index):
  atStation & station=index;

define 
  stopping := motors = STOP;
  forwarding := motors = FWD;
  backwarding := motors = BWD;
  
  willEnterStation := !atStation & next(atStation);
  
  noTasks := shuttleTasks[0]=false & 
             shuttleTasks[1]=false & 
             shuttleTasks[2]=false & 
             shuttleTasks[3]=false;
  
  noPressedStations := !pressedStationOne & 
                       !pressedStationTwo & 
                       !pressedStationThree & 
                       !pressedStationFour;
  
  satisfiesTask :=((shuttleTasks[0] & atGivenStation(0) -> (shuttleTasks[0]=false)) &
                   (shuttleTasks[1] & atGivenStation(1) -> (shuttleTasks[1]=false)) &
                   (shuttleTasks[2] & atGivenStation(2) -> (shuttleTasks[2]=false)) &
                   (shuttleTasks[3] & atGivenStation(3) -> (shuttleTasks[3]=false)));
  
  addTasks := (pressedStationOne -> (shuttleTasks[0]=true)) &
              (pressedStationTwo -> (shuttleTasks[1]=true)) &
              (pressedStationThree -> (shuttleTasks[2]=true)) &
              (pressedStationFour -> (shuttleTasks[3]=true));
  
  keepTasksStatus := ((!pressedStationOne   & (!atGivenStation(0) | shuttleTasks[0] = false)) -> PREV(shuttleTasks[0]) = shuttleTasks[0]) &
                     ((!pressedStationTwo   & (!atGivenStation(1) | shuttleTasks[1] = false)) -> PREV(shuttleTasks[1]) = shuttleTasks[1]) &
                     ((!pressedStationThree & (!atGivenStation(2) | shuttleTasks[2] = false)) -> PREV(shuttleTasks[2]) = shuttleTasks[2]) &
                     ((!pressedStationFour  & (!atGivenStation(3) | shuttleTasks[3] = false)) -> PREV(shuttleTasks[3]) = shuttleTasks[3]);
  
  taskWillBeTrue := 
    ((next(shuttleTasks[0]) = true) <-> 
            (pressedStationOne   | (shuttleTasks[0]=true & !atGivenStation(0)))) &
    ((next(shuttleTasks[1]) = true) <-> 
            (pressedStationTwo   | (shuttleTasks[1]=true & !atGivenStation(1)))) &                     
    ((next(shuttleTasks[2]) = true) <-> 
            (pressedStationThree | (shuttleTasks[2]=true & !atGivenStation(2)))) &                    
    ((next(shuttleTasks[3]) = true) <-> 
            (pressedStationFour  | (shuttleTasks[3]=true & !atGivenStation(3)))); 

//  taskWillBeFalse := 
//    ((next(shuttleTasks[0]) = false) <->
//            ((shuttleTasks[0]=false & !pressedStationOne) | 
//            (shuttleTasks[0]=true & atGivenStation(0)))) &
//    ((next(shuttleTasks[1]) = false) <->
//            ((shuttleTasks[1]=false & !pressedStationTwo) | 
//            (shuttleTasks[1]=true & atGivenStation(1)))) &
//    ((next(shuttleTasks[2]) = false) <->
//            ((shuttleTasks[2]=false & !pressedStationThree) | 
//            (shuttleTasks[2]=true & atGivenStation(2)))) &
//    ((next(shuttleTasks[3]) = false) <->
//            ((shuttleTasks[3]=false & !pressedStationFour) | 
//            (shuttleTasks[3]=true & atGivenStation(3))));

  stationWillIncrease := next(station) = station+1;
  stationWillDecrease := next(station) = station-1;
  
///////////////////////////////////////
// Environment Specification
/////////////////////////////////////

assumption initialStateEnv:
 station = 0 & atStation & noPressedStations;

// Leave station eventually
assumption leaveStationEventually:
  pRespondsToS (atStation & ((forwarding & station < 3) | (backwarding & station > 0)), !atStation);// | stopping

// In station eventually
assumption inStationEventually:
  pRespondsToS (!atStation & (forwarding | backwarding), atStation);  //| stopping

assumption
  G !willEnterStation -> next(station) = station;

// stationWillIncrease (willEnterStation)
assumption
  G stationWillIncrease -> forwarding;

// stationWillDecrease (willEnterStation)
assumption
  G stationWillDecrease -> backwarding;
  
assumption
  G (next(station)= station) | (next(station)= station +1) | (next(station)= station-1); 

// Station does not change when stopping
assumption stationDoesNotChangeWhenStopping:
  G  (stopping -> ((atStation = next(atStation)) & (station = next(station))));
  
assumption
  G ((atGivenStation(0)) -> !pressedStationOne) &
    ((atGivenStation(1)) -> !pressedStationTwo) &
    ((atGivenStation(2)) -> !pressedStationThree) &
    ((atGivenStation(3)) -> !pressedStationFour) ;

assumption
  GF !pressedStationOne; 

assumption
  GF !pressedStationTwo; 

assumption
  GF !pressedStationThree; 

assumption
  GF !pressedStationFour;   

///////////////////////////////////////
// System Specification
///////////////////////////////////////
    
// Initial state 
guarantee initialState:
  stopping & noTasks;

/* 
guarantee
 G satisfiesTask;
 
guarantee
 G satisfiesTask -> stopping;

guarantee
  G addTasks; 
*/ 

guarantee 
  G taskWillBeTrue;
  
//guarantee
//  G taskWillBeFalse;

//satisfiesTask -> stopping; 
guarantee
  G ((next(shuttleTasks[0]=false)& shuttleTasks[0]=true) |
     (next(shuttleTasks[1]=false)& shuttleTasks[1]=true) |
     (next(shuttleTasks[2]=false)& shuttleTasks[2]=true) | 
     (next(shuttleTasks[3]=false)& shuttleTasks[3]=true)) -> stopping; 
 
guarantee
  pHolds_afterQuntilR(forwarding, !atStation, stationWillIncrease);
  
guarantee
  pHolds_afterQuntilR(backwarding, !atStation, stationWillDecrease);  

//guarantee
//  pHolds_afterQuntilR(forwarding, atGivenStation(0), atGivenStation(1)); 
//  
//guarantee
//  pHolds_afterQuntilR(forwarding, atGivenStation(1), atGivenStation(2));
  
//guarantee
//  pHolds_afterQuntilR(forwarding, atGivenStation(2), atGivenStation(3));
//
//guarantee
//  pHolds_afterQuntilR(backwarding, atGivenStation(3), atGivenStation(2)); 
//  
//guarantee
//  pHolds_afterQuntilR(backwarding, atGivenStation(2), atGivenStation(1)); 
//  
//guarantee
//  pHolds_afterQuntilR(backwarding, atGivenStation(1), atGivenStation(0));   

///////////////////////////////////////
// Safety of the system
///////////////////////////////////////

/*
// Don't change tasks status if not needed (needed = add task or satisfies task)
guarantee
  G keepTasksStatus;
 */
 
// if no tasks stop when entering station
guarantee
  G noTasks -> stopping;
   
guarantee
  G atGivenStation(0) -> !backwarding;

guarantee
  G atGivenStation(3) -> !forwarding;
///////////////////////////////////////
// Liveness of system
///////////////////////////////////////

//allTasksAreSatisfaidEventually:
guarantee
  GF shuttleTasks[0]=false;
guarantee
  GF shuttleTasks[1]=false;
guarantee
  GF shuttleTasks[2]=false;
guarantee
  GF shuttleTasks[3]=false;
 