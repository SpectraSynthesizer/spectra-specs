import "../patterns/DwyerPatterns.spectra"

module Elevator


type TouchSensorC={ON,OFF};
type DoorMotorC={CLOSE,STOP,OPEN};
type LiftMotorC={UP,STOP,DOWN};
type LampC={ON,OFF};
type VelocityC={ZERO,SLOW,FAST};



env boolean[4] calls_c;
env boolean seconds3;
//env boolean seconds5;
env boolean seconds20;
//env boolean shabbatMode;



sys LiftMotorC liftM_c;
sys DoorMotorC doorM_c;
sys LampC lamp_c;
sys boolean countTime_c;


aux boolean[4] memCalls;

define
  goingUp             := (liftM_c=UP);
  goingDown           := (liftM_c=DOWN);
  moving              := (goingUp|goingDown);
  stayingSameHeigt    := !moving;  
  openningDoors       := (doorM_c=OPEN);
  closingDoors        := (doorM_c=CLOSE);
  keepDoorsState      := (doorM_c=STOP);
  lightIsOn           := (lamp_c=ON);
  floor0              := (aboveTheGround=0);
  floor1              := (aboveTheGround=5);
  floor2              := (aboveTheGround=10); 
  floor3              := (aboveTheGround=15);
  //atFloor             := (floor0|floor1|floor2|floor3); 
  atFloorThatCalled   := (floor0&memCalls[0])|(floor1&memCalls[1])|(floor2&memCalls[2])|(floor3&memCalls[3]);
  doorsAreFullyOpened := (distanceBetweenDoors=15);
  doorsAreClosed      := (distanceBetweenDoors=0); 
  anyCalls            := (memCalls[0]|memCalls[1]|memCalls[2]|memCalls[3]);
  edged_floor         := (aboveTheGround=0|aboveTheGround=15);

predicate changeMonitorByOperation(boolean cond,Int(0..15) m,Int(0..2) d):
  cond<->(next(m)=(m+d-1));


//predicate xImpNextY(boolean cond1,boolean cond2):
//  cond1->next(cond2);

 
monitor Int(0..15) aboveTheGround
{
  (aboveTheGround=0);
  G changeMonitorByOperation(goingUp,aboveTheGround,2);
  G changeMonitorByOperation(goingDown,aboveTheGround,0);
  G changeMonitorByOperation(stayingSameHeigt,aboveTheGround,1);
}


monitor Int(0..15) distanceBetweenDoors
{
  (distanceBetweenDoors=0);
  G changeMonitorByOperation(openningDoors,distanceBetweenDoors,2);
  G changeMonitorByOperation(closingDoors,distanceBetweenDoors,0);
  G changeMonitorByOperation(keepDoorsState,distanceBetweenDoors,1);
}


monitor Int(0..3) currentFloor
{
  (currentFloor=0);
  G floor0<->(currentFloor=0);
  G floor1<->(currentFloor=1);
  G floor2<->(currentFloor=2);
  G floor3<->(currentFloor=3);
}


monitor boolean returnTo0
{
   (!returnTo0);
   G (!floor0) & (((!anyCalls)&(seconds20))|returnTo0)<->next(returnTo0); 
}


gar init_motors:
  (stayingSameHeigt)&(keepDoorsState)&(!lightIsOn);
  
gar setZeroCalls:
  (!memCalls[0])&(!memCalls[1])&(!memCalls[2])&(!memCalls[3]);
  
asm
  !seconds20;
  
  
gar doorsAreClosedWhileMoving:
  G(moving -> (doorsAreClosed&keepDoorsState));

gar ifFloor0DontGoDown:
  G(floor0->!(goingDown));
  
gar ifFloor3DontGoUp:
  G(floor3->!(goingUp));
  
gar lightBlinksWhileMoving:
  G(moving->(next(lightIsOn)!=lightIsOn));

gar lightIsOffWhileNotMoving:
  G((!moving)->(!next(lightIsOn)));

gar ifCallsFromFloor0GoTo0:
  pRespondsToS(calls_c[0],floor0);

gar ifCallsFromFloor1GoTo1:
  pRespondsToS(calls_c[1],floor1);
  
//gar ifCallsFromFloor2GoTo2:
  //pRespondsToS(calls[2],floor2);
  
//gar ifCallsFromFloor3GoTo3:
  //pRespondsToS(calls[3],floor3);

gar dontChangeDirectionWithoutStopping:
  G((goingUp->next(!goingDown))&(goingDown->next(!goingUp)));
 
gar rememberCalls:
  G   (calls_c[0]->next(memCalls[0]))&
      (calls_c[1]->next(memCalls[1]))&
      (calls_c[2]->next(memCalls[2]))&
      (calls_c[3]->next(memCalls[3]));
    


gar ifMovingDontStopTillFloorThatCalled:
  G moving->next((stayingSameHeigt)<->(atFloorThatCalled|edged_floor));
    
 
gar ifAtFloorThatCalledRemoveCall:
    G ((floor0&!calls_c[0])->next(!memCalls[0]))&
      ((floor1&!calls_c[1])->next(!memCalls[1]))&
      ((floor2&!calls_c[2])->next(!memCalls[2]))&
      ((floor3&!calls_c[3])->next(!memCalls[3]));
/* 
asm whenCalledAndAtTheRightFloor:
  pBecomesTrue_betweenQandR(seconds3,atFloorThatCalled&(!moving),moving);
 // G (atFloorThatCalled&(!moving)&(!seconds3))->next(!moving);
 
gar dontMoveWithoutReason:
  G ((!anyCalls)&(!returnTo0))->!moving;//&(!shabbatMode))->!moving;

gar startCountingTime:
  G ((!(anyCalls|floor0))|(atFloorThatCalled&(!moving)))<->countTime_c;

gar returnTo1WhenNeeds:
  G (returnTo0&(!floor0))->goingDown;
  
asm
  G (!countTime_c)->(!(seconds20)|(seconds3));
  
*/
//gar
  //GF(!countTime_c);
