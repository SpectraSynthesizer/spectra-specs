import "../patterns/DwyerPatterns.spectra"

module AirportShuttle

env Int(0..3) station;
env boolean atStation;

env boolean pressedStationOne;
env boolean pressedStationTwo;
env boolean pressedStationThree;
env boolean pressedStationFour;

sys MotorCmd motors;
sys boolean[4] shuttleTasks;

type MotorCmd = {FWD, STOP, BWD};

predicate atGivenStation(Int(0..3) index):
  atStation & station=index;

define 
  stopping := motors = STOP;
  forwarding := motors = FWD;
  backwarding := motors = BWD;
  
  enteringStation := atStation & (PREV (!atStation));
  
  noTasks := shuttleTasks[0]=false & 
             shuttleTasks[1]=false & 
             shuttleTasks[2]=false & 
             shuttleTasks[3]=false;
  
  noPressedStations := !pressedStationOne & 
                       !pressedStationTwo & 
                       !pressedStationThree & 
                       !pressedStationFour;
  
  taskAtCurrentStation := (shuttleTasks[0] & station = 0) | 
                          (shuttleTasks[1] & station = 1) |
                          (shuttleTasks[2] & station = 2) | 
                          (shuttleTasks[3] & station = 3);   
  
  satisfiesTask := (station = 0 -> next(shuttleTasks[0]=false)) &
                   (station = 1 -> next(shuttleTasks[1]=false)) &
                   (station = 2 -> next(shuttleTasks[2]=false)) &
                   (station = 3 -> next(shuttleTasks[3]=false));
  
  addTasks := (pressedStationOne -> next(shuttleTasks[0]=true)) &
              (pressedStationTwo -> next(shuttleTasks[1]=true)) &
              (pressedStationThree -> next(shuttleTasks[2]=true)) &
              (pressedStationFour -> next(shuttleTasks[3]=true));
  
  keepTasksStatus := (!pressedStationOne   & (!atGivenStation(0) | shuttleTasks[0] = false) -> next(shuttleTasks[0]) = shuttleTasks[0]) &
                     (!pressedStationTwo   & (!atGivenStation(1) | shuttleTasks[1] = false) -> next(shuttleTasks[1]) = shuttleTasks[1]) &
                     (!pressedStationThree & (!atGivenStation(2) | shuttleTasks[2] = false) -> next(shuttleTasks[2]) = shuttleTasks[2]) &
                     (!pressedStationFour  & (!atGivenStation(3) | shuttleTasks[3] = false) -> next(shuttleTasks[3]) = shuttleTasks[3]);
  
  stationIncreased := PREV (next(station) - station = 1);
  stationDecreased := PREV (station - next(station) = 1);
  
///////////////////////////////////////
// Environment Specification
/////////////////////////////////////

assumption initialStateEnv:
  station = 0 & atStation & noPressedStations;
 
// Leave station eventually
assumption leaveStationEventually:
  pRespondsToS (forwarding | backwarding, !atStation | stopping);

assumption
  G !enteringStation <-> next(station) = station;

assumption
  G enteringStation & PREV(forwarding) <-> stationIncreased;
 
assumption
  G enteringStation & PREV(backwarding) <-> stationDecreased;  

assumption
  pHolds_afterQuntilR(forwarding, !atStation , stationIncreased & atStation);

assumption
  pHolds_afterQuntilR(backwarding, !atStation , stationDecreased & atStation);

// Station does not change when stopping
assumption stationDoesNotChangeWhenStopping:
  G (stopping -> (atStation = next(atStation)) & (station = next(station)));

assumption curStationNotPressedWhileAtStation: 
  G (atGivenStation(0) -> !pressedStationOne) & (atGivenStation(1) -> !pressedStationTwo) &
    (atGivenStation(2) -> !pressedStationThree) & (atGivenStation(3) -> !pressedStationFour);

assumption
  GF noPressedStations;
  
///////////////////////////////////////
// System Specification
///////////////////////////////////////
    
// Initial state 
guarantee initialState:
  stopping & noTasks;

// satisfiesTask
guarantee
  G enteringStation & taskAtCurrentStation -> stopping & satisfiesTask ;

guarantee
  G addTasks; 
  
///////////////////////////////////////
// Safety of the system
///////////////////////////////////////

// Don't change tasks status if not needed (needed = add task or satisfies task)
guarantee
  G keepTasksStatus;

// if no tasks stop when entering station
guarantee
 // G enteringStation & noTasks -> stopping;
  G atStation & noTasks -> stopping;
  
  
// for well-separated Environment (Causes unrealizable)  
//guarantee
//  G  stopping -> enteringStation ;
   
///////////////////////////////////////
// Liveness of system
///////////////////////////////////////

guarantee allTasksAreSatisfaidEventually:
  GF (noTasks);