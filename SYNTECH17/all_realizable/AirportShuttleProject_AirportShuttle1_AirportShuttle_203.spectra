import "../patterns/DwyerPatterns.spectra"

module AirportShuttle

env Int(0..3) station;
env boolean atStation;

env boolean pressedStationOne;
env boolean pressedStationTwo;
env boolean pressedStationThree;
env boolean pressedStationFour;

sys MotorCmd motors;
sys boolean[4] shuttleTasks;

type MotorCmd = {FWD, STOP, BWD};

predicate atGivenStation(Int(0..3) index):
  atStation & station=index;
  

define 
  stopping := motors = STOP;
  forwarding := motors = FWD;
  backwarding := motors = BWD;
  
  willEnterStation := !atStation & next(atStation);
  
  noTasks := shuttleTasks[0]=false & shuttleTasks[1]=false & 
             shuttleTasks[2]=false & shuttleTasks[3]=false;
  
  noPressedStations := !pressedStationOne & !pressedStationTwo & 
                       !pressedStationThree & !pressedStationFour;
  
  atStationWithTask := atStation & ((station = 0 & shuttleTasks[0]=true) |
                                    (station = 1 & shuttleTasks[1]=true) |
                                    (station = 2 & shuttleTasks[2]=true) |
                                    (station = 3 & shuttleTasks[3]=true));  
  
  updateTasks := 
    ((next(shuttleTasks[0]) = false) <->
            ((shuttleTasks[0]=false & !pressedStationOne) | 
            (shuttleTasks[0]=true & atGivenStation(0) & stopping))) &
    ((next(shuttleTasks[1]) = false) <->
            ((shuttleTasks[1]=false & !pressedStationTwo) | 
            (shuttleTasks[1]=true & atGivenStation(1) & stopping))) &
    ((next(shuttleTasks[2]) = false) <->
            ((shuttleTasks[2]=false & !pressedStationThree) | 
            (shuttleTasks[2]=true & atGivenStation(2) & stopping ))) &
    ((next(shuttleTasks[3]) = false) <->
            ((shuttleTasks[3]=false & !pressedStationFour) | 
            (shuttleTasks[3]=true & atGivenStation(3) & stopping )));

  stationWillIncrease := next(station) = station+1;
  stationWillDecrease := next(station) = station-1;
  
                                  
  noTasksForward := ((atGivenStation(0) & (shuttleTasks[1] = false & shuttleTasks[2] = false & shuttleTasks[3] = false)) |
                    (atGivenStation(1) &  (shuttleTasks[2] = false & shuttleTasks[3] = false)) |
                    (atGivenStation(2) &  (shuttleTasks[3] = false)));
  
  noTasksBackward := ((atGivenStation(3) & (shuttleTasks[2] = false & shuttleTasks[1] = false & shuttleTasks[0] = false)) | 
                     (atGivenStation(2) &  (shuttleTasks[1] = false & shuttleTasks[0] = false)) |
                     (atGivenStation(1) &  (shuttleTasks[0] = false)));
                      
  noTaskAtCurrentStation := (atGivenStation(0) & shuttleTasks[0] = false) | 
                            (atGivenStation(1) & shuttleTasks[1] = false) |
                            (atGivenStation(2) & shuttleTasks[2] = false) | 
                            (atGivenStation(3) & shuttleTasks[3] = false);                       
///////////////////////////////////////
// Environment Specification
/////////////////////////////////////

assumption initialStateEnv:
 station = 0 & atStation & noPressedStations;

// Forwarding cause station increase 
assumption forwardingCauseStationIncrease:
  pRespondsToS(forwarding &  !atGivenStation(3), stationWillIncrease | !forwarding);

// Backwarding cause station decrease   
assumption backwardingCauseStationDecrease:
  pRespondsToS(backwarding & !atGivenStation(0), stationWillDecrease | !backwarding);

// Station number can only change when entering station
assumption 
  G !willEnterStation -> next(station) = station;

// Station can only increase by going forwarding (and entering station)
assumption
  G willEnterStation & forwarding -> stationWillIncrease;

// Station can only decrease by going backwarding (and entering station)
assumption
  G willEnterStation & backwarding -> stationWillDecrease; 

// Stations can only increase or decrease by one 
assumption
  G (next(station)= station) | (next(station)= station +1) | (next(station)= station-1); 

// Station can't change while stopping
assumption stationDoesNotChangeWhenStopping:
  G  (stopping -> ((atStation = next(atStation)) & (station = next(station))));
 
// Current station not pressed while at station 
assumption currentStationNotPressedWhileAtStation:
  G (next(atGivenStation(0)) -> next(!pressedStationOne)) &
    (next(atGivenStation(1)) -> next(!pressedStationTwo)) &
    (next(atGivenStation(2)) -> next(!pressedStationThree)) &
    (next(atGivenStation(3)) -> next(!pressedStationFour));

///////////////////////////////////////
// System Specification
///////////////////////////////////////
    
// Initial state 
guarantee initialState:
  stopping & noTasks;
  
// Defines shuttleTasks update   
guarantee
  G updateTasks;

///////////////////////////////////////
// Safety of the system
///////////////////////////////////////
  
// Can't driving backward in the first station 
guarantee
  G atGivenStation(0) -> !backwarding;

// Can't driving forward in the last station  
guarantee
  G atGivenStation(3) -> !forwarding;

// If no tasks stop when entering station
guarantee
  G noTasks -> stopping;
  
// When passing station and this station was called stop at station.
guarantee
  G atStationWithTask -> stopping;

// Preventing unnecessary driving forward
guarantee
  G noTasksForward -> (!forwarding);  

// Preventing unnecessary driving backward
guarantee
  G noTasksBackward -> (!backwarding); 

// Prevention unnecessary stopping  
guarantee
  G (noTaskAtCurrentStation & !noTasks) -> (!stopping);                              

// Can't stop while not in station
guarantee
G !atStation -> !stopping;

// Can't change direction without stopping  
guarantee
  G (!stopping -> (next(motors) = motors | next(stopping)));

///////////////////////////////////////
// Liveness of system
///////////////////////////////////////

// All Tasks Are Satisfied Eventually:
guarantee
  GF shuttleTasks[0]=false;
guarantee
  GF shuttleTasks[1]=false;
guarantee
  GF shuttleTasks[2]=false;
guarantee
  GF shuttleTasks[3]=false;
  
