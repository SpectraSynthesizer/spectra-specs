import "../patterns/DwyerPatterns.spectra"

module AirportShuttle

env Station station;
env Button stopButton;
env DoorStatus doorStatus;
env boolean technicianAck;
env Station baseStation;
env Station pressedStation;
env boolean readyToBaseStation;

sys MotorCmd mLeft;
sys MotorCmd mRight;
sys DoorOp doorReq;
sys boolean startTechnicalJob;
sys boolean[4] shuttleTasksFwd;
sys boolean[4] shuttleTasksBwd;

sys Station pickUpStation;

sys Int(1..10) test;

type Button = {PRESSED, RELEASED};
type MotorCmd = {FWD, STOP, BWD};
type Direction = {GOING_FWD, GOING_BWD, GOING_NONE};
type Station = {ONE, TWO, THREE, FOUR, NONE};
type DoorOp = {OPEN, CLOSE, NIL};
type DoorStatus = {OPENED, CLOSED, IN_PROCESS};

define 
  stopping := mLeft = STOP & mRight = STOP;
  forwarding := mLeft = FWD & mRight = FWD;
  backwarding := mLeft = BWD & mRight = BWD;
  atStation := station != NONE;
  atBaseStation := station = baseStation;
  enteringStation := (station != NONE) & (PREV (station = NONE));
  openDoorReq := doorReq = OPEN;
  closeDoorReq := doorReq = CLOSE;
  doorCounterIncreased := (PREV (next(doorOperationsCounter) - doorOperationsCounter = 1) );
  bwdDirection := 0;
  fwdDirection := 1;
  noRequests := (shuttleTasksFwd[0]=false & shuttleTasksFwd[1]=false & 
                              shuttleTasksFwd[2]=false & shuttleTasksFwd[3]=false &
                              shuttleTasksBwd[0]=false & shuttleTasksBwd[1]=false & 
                              shuttleTasksBwd[2]=false & shuttleTasksBwd[3]=false);

  
///////////////////////////////////////
// Environment Specification
/////////////////////////////////////

assumption initialStateEnv:
  stopButton=RELEASED & doorStatus=CLOSED & !atStation & noRequests;
 
// Leave station eventually
assumption leaveStationEventually:
  pRespondsToS (forwarding | backwarding, !atStation | stopping);
  
// Station does not change when stopping
assumption stationDoesNotChangeWhenStopping:
  G (stopping -> station = next(station));

// Not always stop at nearest station
assumption notAlwaysStopAtNearestStation:
  GF !stopAtNearestStation;

// Done door process eventually
assumption doneDoorProcessEventually:
  GF doorStatus!=IN_PROCESS;
    
// No strange doorStatus 1
assumption noStrangeDoorStatus1:
  G (next(doorStatus=OPENED) -> (doorStatus=IN_PROCESS));
  
// No strange doorStatus 2
assumption noStrangeDoorStatus2:
  G (next(doorStatus=CLOSED) -> (doorStatus!=OPENED));

// door in process only when asked to
assumption
  G (next(doorStatus = IN_PROCESS) -> (doorStatus = IN_PROCESS) | openDoorReq  | closeDoorReq);

// No one press on stopButton while atStation
assumption
  G (atStation -> stopButton=RELEASED);

// Initially no technician ack
assumption initiallyNoTechnicianAck:
  !technicianAck;
  
assumption doneTechnicianActionEventually:
  pRespondsToS(techGuyInAction, technicianAck);
 
// No strange technician acks
assumption noStrangeTechnicianAcks:
  G (next(technicianAck) -> (techGuyInAction & !technicianAck));


///////////////////////////////////////
// System Specification
///////////////////////////////////////

// Initial state 
guarantee initialState:
stopping & doorReq=NIL;

// Stop if at station and stopAtNearestStation is true 
guarantee stopAtNearestStationWhenAsked:
G (atStation & stopAtNearestStation -> stopping);

/**
 * monitor stopAtNearestStation becomes true when stopButton is pressed
 * TBD
 */
monitor boolean stopAtNearestStation {
  // Initially not stopAtNearestStation
  !stopAtNearestStation;
  // If stopButton is pressed - change stopAtNearestStation to true
  G ( (stopButton = PRESSED & !doorCounterIncreased) -> next(stopAtNearestStation));
  // If doorCounterIncreased - change stopAtNearestStation to false
  G ( (doorCounterIncreased) -> next(!stopAtNearestStation));
  // If
  G ( ((stopButton = RELEASED) & !doorCounterIncreased) -> stopAtNearestStation = next(stopAtNearestStation));
} 


// Don't change door request when door is in process
guarantee dontChangeDoorRequestWhenDoorIsInProcess:
  G (doorStatus=IN_PROCESS -> doorReq=NIL);


// Open door iff stopping because of stop request and door is closed
// (stopAtNearestStation will be false after 1 cycle of open and close)
guarantee
G (atStation & stopAtNearestStation) & (doorStatus = CLOSED) & (!doorCounterIncreased) <-> openDoorReq;


// Close door after open
guarantee closeDoorAfterOpen:
G ( (doorStatus = OPENED) <-> closeDoorReq);


/**
 * monitor doorOperationsCounter is counting open-close operations
 * From 0 to 10
 */ 
monitor Int(0..10) doorOperationsCounter {
  doorOperationsCounter = 0;
  G (doorStatus != CLOSED) & (doorOperationsCounter != 10) -> (next(doorOperationsCounter) = doorOperationsCounter);
  G ((doorStatus = CLOSED) & PREV(doorStatus = CLOSED) & (doorOperationsCounter != 10)) -> (next(doorOperationsCounter) = doorOperationsCounter);
  G ((doorStatus = CLOSED) & PREV(doorStatus != CLOSED) & (doorOperationsCounter != 10)) -> (next(doorOperationsCounter) = (doorOperationsCounter + 1));
  G (doorOperationsCounter = 10) -> (next (doorOperationsCounter) = 0);
}



monitor boolean techGuyInAction {
  ! techGuyInAction;
  G ( (doorOperationsCounter = 10 & !technicianAck) -> next(techGuyInAction));
  G ( technicianAck -> next(!techGuyInAction));
  G ( (!technicianAck & doorOperationsCounter != 10) -> techGuyInAction = next(techGuyInAction));
}


// Stop when techGuyInAction
guarantee stopWhenTechGuyInAction:
G (techGuyInAction -> stopping);


// Start technical job iff entering techGuyInAction state
guarantee
G (PREV(!techGuyInAction) & techGuyInAction <-> startTechnicalJob );


monitor Station lastPassedStation {
  lastPassedStation = NONE;
  G (atStation -> next(lastPassedStation) = station);
  G (!atStation -> next(lastPassedStation) = lastPassedStation);
}


// Both are only logic, the types currently mismatch
guarantee
G (pressedStation != NONE) & 
                  ((forwarding &  (lastPassedStation - pressedStation <= 0)) | 
                   (backwarding & (lastPassedStation - pressedStation <= 0)) ) -> shuttleTasksFwd[pressedStation] = true;

guarantee
G (pressedStation != NONE) & 
                  ((forwarding &  (lastPassedStation - pressedStation > 0)) | 
                   (backwarding & (lastPassedStation - pressedStation >= 0)) ) -> shuttleTasksBwd[pressedStation] = true;

///////////////////////////////////////
// Safety of the system
///////////////////////////////////////

guarantee 
G ( (noRequests & atBaseStation) -> stopping);

///////////////////////////////////////
// Liveness of system
///////////////////////////////////////


guarantee allRequestsAreSatisfaidEventually:
  GF (noRequests);

//predicate taskIsSatisfaid(Int(0..1) direction, Int(0..3) stationIndex):
//  (direction = 0 & (shuttleTasksBwd[stationIndex]=false)) | (direction = 1 & (shuttleTasksFwd[stationIndex]=false)); 
