import "../patterns/DwyerPatterns.spectra"
module VehicleSpec      

env Int(0..5) frontSense;
env Int(0..5) backSense;
env Int(0..5) sideSense;
env Status status; 

sys MotorCmd driveMotor;
sys SenseMotorCmd senseMotor; 
sys AngleCmd steeringMotor; 
sys Int(1..5) velocity;
sys Mode mode;


type SenseMotorCmd = {SIDE, BACK};
type MotorCmd = {FWD, STOP, BWD};
type Mode = {SEARCHING, SCANNING, PARKING, PARKED};
type Status = {PARALLEL, NONE};
type AngleCmd = {STRAIGHT, HARD_LEFT, LIGHT_LEFT, LIGHT_RIGHT, HARD_RIGHT};


define
  stopping := driveMotor = STOP ;
  forwarding := driveMotor = FWD; 
  reversing := driveMotor = BWD ;
  light_left_fwd := steeringMotor = LIGHT_LEFT & driveMotor = FWD;
  light_left_bwd := steeringMotor = LIGHT_LEFT & driveMotor = BWD;
  hard_left_fwd := steeringMotor = HARD_LEFT & driveMotor = FWD;
  hard_left_bwd := steeringMotor = HARD_LEFT & driveMotor = BWD;
  light_right_fwd := steeringMotor = LIGHT_RIGHT & driveMotor = FWD;
  light_right_bwd := steeringMotor = LIGHT_RIGHT & driveMotor = BWD;
  hard_right_fwd := steeringMotor = HARD_RIGHT & driveMotor = FWD;
  hard_right_bwd := steeringMotor = HARD_RIGHT & driveMotor = BWD;
  sideways := light_left_fwd | light_left_bwd | hard_left_fwd | hard_left_bwd | light_right_fwd | light_right_bwd | hard_right_fwd | hard_right_bwd;
  fwd_turning := (steeringMotor = HARD_LEFT | steeringMotor = HARD_RIGHT | steeringMotor = LIGHT_LEFT | steeringMotor = LIGHT_RIGHT) & forwarding;
  bwd_turning := (steeringMotor = HARD_LEFT | steeringMotor = HARD_RIGHT | steeringMotor = LIGHT_LEFT | steeringMotor = LIGHT_RIGHT) & reversing;

  //gar 
//G mode = SEARCHING &  PREV(senseMotor = SIDE) & sideSense > 2 & status = NONE & frontSense > 2-> next(mode) = SCANNING & senseMotor = SIDE;  
//
//gar
//G mode = SCANNING & sideSense <= 2 -> next(mode) = SEARCHING;
  
guarantee initial:
  mode = SEARCHING & senseMotor = SIDE & steeringMotor = STRAIGHT;
  
gar
G (mode = SEARCHING | mode = SCANNING) & status = NONE -> senseMotor = SIDE; 

//start scanning if the front sensor is sufficiently clear
gar startScanning:
G (mode = SEARCHING & frontSense > 2 & sideSense > 2 & status = NONE) -> (senseMotor = SIDE & next(mode) = SCANNING & driveMotor = FWD & steeringMotor = STRAIGHT); 

//Keep scanning while the front sensor is sufficiently clear
gar keepScanning:
G (mode = SCANNING & frontSense > 2 & sideSense > 2 & status = NONE) -> (senseMotor = SIDE & next(mode) = SCANNING & driveMotor = FWD & steeringMotor = STRAIGHT);  

gar foundPlace:
G (PREV(mode = SCANNING) & status = PARALLEL) -> (mode = PARKING);

gar pGear:
G (status = PARALLEL & mode = PARKING & sideSense <= 1 & steeringMotor = STRAIGHT & driveMotor = STOP) <-> (next(mode) = PARKED);

gar alwaysParkTheCar:
GF mode = PARKED;

////If we
//guarantee parallelParkingPart1:
//G (mode = PARKING & status = PARALLEL & backSense > 2) -> (PREV(senseMotor = BACK) & driveMotor = BWD & next(mode) = PARKING & steeringMotor = HARD_RIGHT);
//  
//gar parallelParkingPart2:
//G (mode = PARKING & status = PARALLEL & backSense <= 2 & backSense > 1) -> (PREV(senseMotor = BACK) & driveMotor = BWD & next(mode) = PARKING & steeringMotor = HARD_LEFT);
//
//gar parallelParkingPart3:
//G (mode = PARKING & status = PARALLEL & backSense <= 1) -> (PREV(senseMotor = BACK) & driveMotor = STOP & next(mode) = PARKED & steeringMotor = STRAIGHT);

gar stayAtParking:
G (mode = PARKED) -> (driveMotor = STOP & steeringMotor = STRAIGHT);
//Make sure we don't crash while moving forward 
guarantee dontCrashFront:
G (frontSense <= 2 & (mode = SCANNING | mode = SEARCHING) & status = NONE) -> (senseMotor = SIDE & next(mode) = SEARCHING & driveMotor = FWD & steeringMotor = HARD_LEFT);
//
//gar 
//G status != NONE -> next(mode) = PARKING;

//Make sure we don't crash while moving backward
guarantee dontCrashBack:  
G driveMotor = BWD -> backSense > 0 & PREV(senseMotor = BACK);

//While moving backward always do so in a slow and controlled manner
guarantee speedWhileInReverse:
G reversing -> PREV(senseMotor = BACK) &  velocity = 1;

//Change the speed of the car according to its distance from an obstacle
guarantee speedWhileClear:
  G frontSense = 5 & mode = SEARCHING -> velocity = 5;
guarantee speedWhileVeryFar:
  G frontSense = 4 & mode = SEARCHING -> velocity = 4;
guarantee speedWhileFar:
  G frontSense = 3 & mode = SEARCHING -> velocity = 3;
guarantee speedWhileMedium:
  G frontSense = 2 & mode = SEARCHING -> velocity = 2;
guarantee slowSpeed:
  G frontSense = 1  | mode = PARKING | mode = SCANNING -> velocity = 1;

  
//Assume that by moving forwards with or without turning will increase the back sensor's distance from a blocking obstacle
assumption 
  pRespondsToS(forwarding, backSense > 0);

//Assume that by moving backwards with or without turning will increase the front sensor's distance from a blocking obstacle
assumption
  pRespondsToS((hard_left_fwd), frontSense > 0);

//asm
//pRespondsToS(PREV(mode = SCANNING) & mode = PARKING & driveMotor = BWD, sideSense <= 1); 

asm 
G (driveMotor = STOP & (frontSense != 0 | backSense !=0)) -> (sideSense = next(sideSense) & backSense = next(backSense) & frontSense = next(frontSense));

gar
G (mode = PARKING) -> (next(mode) = PARKING | next(mode) = PARKED);

gar 
G (driveMotor = BWD) -> (next(driveMotor) = BWD | next(sideSense) = sideSense - 1);

gar 
G (driveMotor = FWD) -> (next(driveMotor) = FWD | next(sideSense) = sideSense + 1);

gar
GF (mode = PARKING -> driveMotor != STOP);

//Assume that there exists some degree of movement in the environment
assumption notInACage:
GF frontSense != 0 | backSense !=0;

//The car is not initially parked
assumption notParkedInitially:
status = NONE & sideSense = 0 & frontSense > 2;
  
//assumption needToScanToFindAParkingSpot:

//Assume that a parking a large enough parking spot to contain the car exists
assumption aParkingSpotExists:
  GF  status = PARALLEL;