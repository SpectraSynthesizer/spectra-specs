---
import "../patterns/DwyerPatterns.spectra"
module VehicleSpec			

env Distance sense;
env Distance parking;
env ParkingSpotStatus status; 
env ParkingType parkingTypeFound; 
env boolean color;
env boolean emgOff;

sys MotorCmd driveMotor;
sys SenseMotorCmd senseMotor; 
sys Int(0..90) steeringMotor; 
sys Int(1..5) velocity;
sys ParkingType parkingMode;

type SenseMotorCmd = {DRIVE, REVERSE};
type MotorCmd = {FWD, STOP, BWD};
type Distance = {BLOCKED, CLOSE, MEDIUM, FAR, VERY_FAR, CLEAR};
type ParkingSpotStatus = {STARTED_SCANNING, FINISHED_SCANNING, NONE};
type ParkingType = {PARALLEL, REVERSED, NONE};

define
  stopping := driveMotor = STOP ;
  forwarding := driveMotor = FWD & steeringMotor = 50;
  leftTurning := steeringMotor < 45& driveMotor != STOP;
  rightTurning := steeringMotor > 45  & driveMotor != STOP;  
  reversing := driveMotor = BWD;
  reverseParking := (senseMotor = REVERSE & sense = CLOSE & parking = BLOCKED) -> (driveMotor = STOP & steeringMotor = 45);
  parallelParking := parking = BLOCKED -> (driveMotor = STOP & steeringMotor = 45);
  foundAParallelSpot := (parkingTypeFound = PARALLEL & status = FINISHED_SCANNING);
  foundAReverseSpot := (parkingTypeFound = REVERSED & status = FINISHED_SCANNING);
  scanning := status = STARTED_SCANNING & sense != BLOCKED;
    
guarantee initialStop:
  stopping;

//The car starts in a non-parking mode - it begins in a drive-ready and parking-spot searching mode  
guarantee initalNotParking:
  parkingMode = NONE;

//If scanning has begun, keep it up until we get note from the environment that the spot is large enoguh
guarantee keepScanning:
  G scanning -> forwarding; //If scanning has begun, keep it up

//Begin a parking in parallel  
guarantee startParkingInParallel:
  pRespondsToS(foundAParallelSpot, parallelParking);

//Begin a parking in reverse
guarantee startParkingInReverse:
  pRespondsToS(foundAReverseSpot, reverseParking);

//Make sure we don't crash while moving forward 
guarantee dontCrashFront:
  G (((sense = BLOCKED) & (senseMotor = DRIVE))  -> ! forwarding);
  
//Make sure we don't crash while moving backward
guarantee dontCrashBack:  
  G (((sense = BLOCKED) & (senseMotor = REVERSE))  -> ! reversing);

//Eventually, the car will move forward, drive somewhere
guarantee keepMovingForward:
  GF forwarding;

//Don't drive forward without the main distance sensor positioned forward
guarantee eyesOnTheRoad:
  G forwarding -> senseMotor = DRIVE;

//Don't drive backward without the main distance sensor positioned backward
guarantee useYourRearviewMirror: 
  G reversing -> senseMotor = REVERSE;    

//Eventually, the car will be parked
guarantee finishedParking:
  GF reverseParking | parallelParking;  

//While moving backward always do so in a slow and controlled manner
guarantee speedWhileInReverse:
  G senseMotor = REVERSE -> velocity = 1;
  
//Change the speed of the car according to its distance from an obstacle
guarantee speedWhileClear:
  G sense = CLEAR -> velocity = 5;
guarantee speedWhileVeryFar:
  G sense = VERY_FAR -> velocity = 4;
guarantee speedWhileFar:
  G sense = FAR -> velocity = 3;
guarantee speedWhileMedium:
  G sense = MEDIUM -> velocity = 2;
guarantee speedWhileClose:
  G sense = CLOSE -> velocity = 1;

//Assume that some degree of movement exists in the environment 
assumption canGetClear:
  pRespondsToS(leftTurning | rightTurning | reversing, sense = CLEAR);

//Assume that a parking spot that is large enough to contain the car
assumption aParkingSpotExists:
  GF parkingTypeFound = REVERSED | parkingTypeFound = PARALLEL;

//The car is not initially parked
assumption notParkedInitially:
  parkingTypeFound = NONE & status = NONE;
  
//We are not going to stay in the parking spot forever
assumption eventuallyGetOutOfParking:
  GF status = NONE;