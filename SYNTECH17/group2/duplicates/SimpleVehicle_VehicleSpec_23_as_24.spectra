
import "../patterns/DwyerPatterns.spectra"
module VehicleSpec			

env Distance sense;
env Distance parking;
env boolean wideEnoughtToPark;
env boolean deepEnoughtToPark; 
env boolean color;
env boolean emgOff;

sys MotorCmd driveMotor;
sys SenseMotorCmd senseMotor; 
sys Int(0..10) steeringMotor; 
sys Int(1..5) velocity;

type SenseMotorCmd = {DRIVE, REVERSE};
type MotorCmd = {FWD, STOP, BWD};
type Distance = {BLOCKED, CLOSE, MEDIUM, FAR, VERY_FAR, CLEAR};


define
  stopping := driveMotor = STOP ;
  forwarding := driveMotor = FWD & steeringMotor = 5  & senseMotor = DRIVE;
  leftTurning := steeringMotor < 5  & driveMotor != STOP;
  rightTurning := steeringMotor > 5  & driveMotor != STOP;  
  reversing := senseMotor = REVERSE & driveMotor = BWD;
  reverseParking := (senseMotor = REVERSE & sense = BLOCKED & parking = BLOCKED) -> (driveMotor = STOP & steeringMotor = 5);
  parallelParking := parking = BLOCKED -> (driveMotor = STOP & steeringMotor = 5);
  
guarantee initialStop:
  stopping;

guarantee dontCrashFront:
  G (((sense = BLOCKED) & (senseMotor = DRIVE))  -> ! forwarding);
  
guarantee dontCrashBack:  
  G (((sense = BLOCKED) & (senseMotor = REVERSE))  -> ! reversing);
  

guarantee keepMovingForward:
  GF forwarding;

//Don't drive forward without the main distance sensor positioned backward
guarantee eyesOnTheRoad:
  G forwarding -> senseMotor = DRIVE;

//Don't drive backward without the main distance sensor positioned backward
guarantee useYourRearviewMirror: 
  G reversing -> senseMotor = REVERSE;    

guarantee finishedParking:
  GF reverseParking | parallelParking;  

guarantee beginParkingInReverse:
    pRespondsToS(deepEnoughtToPark, reverseParking);
    
guarantee beginParallelParking:
  pRespondsToS(wideEnoughtToPark, parallelParking);    
  
guarantee speedWhileClear:
  G sense = CLEAR -> velocity = 5;

guarantee speedWhileVeryFar:
  G sense = VERY_FAR -> velocity = 4;

guarantee speedWhileFar:
  G sense = FAR -> velocity = 3;

guarantee speedWhileMedium:
  G sense = MEDIUM -> velocity = 2;

guarantee speedWhileClose:
  G sense = CLOSE -> velocity = 1;


assumption canGetClear:
  pRespondsToS(leftTurning | rightTurning | reversing, sense = CLEAR);

assumption aParkingSpotExists:
  GF wideEnoughtToPark | deepEnoughtToPark;