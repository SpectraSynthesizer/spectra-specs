import "../patterns/DwyerPatterns.spectra"
module ParkingSpec      

env Int(0..5) frontSense;
env Int(0..5) sideSense;
env Status status; 
env SideStatus sideStatus;
env ColorCmd color;
env boolean align; //Start steering to the left while parking until we are aligned.
env boolean done; 

sys MotorCmd driveMotor;
sys MotorCmd steeringMotor;
sys Int(0..5) velocity;
sys Mode mode;

 
type MotorCmd = {FWD, STOP, BWD, HARD_LEFT, LIGHT_LEFT, STRAIGHT, LIGHT_RIGHT, HARD_RIGHT};
type Mode = {SEARCHING, SCANNING, PARKING, PARKED};
type Status = {PARALLEL, REVERSE, NONE};
type SideStatus = {MIN_PARALLEL , MIN_REVERSE, NONE};
type ColorCmd = {BLACK , GREEN , BLUE};

define
  valid_parking_spot := (status != NONE) & (color != BLUE) &(align = true)& (done = true);
  stopping := velocity = 0;
  forwarding := driveMotor = FWD & velocity > 0;
  reversing := driveMotor = BWD & velocity > 0;
  left := steeringMotor = LIGHT_LEFT | steeringMotor = HARD_LEFT;
  right := steeringMotor = LIGHT_RIGHT | steeringMotor = HARD_RIGHT;
  light_left_fwd := steeringMotor = LIGHT_LEFT & driveMotor = FWD;
  light_left_bwd := steeringMotor = LIGHT_LEFT & driveMotor = BWD;
  hard_left_fwd := steeringMotor = HARD_LEFT & driveMotor = FWD;
  hard_left_bwd := steeringMotor = HARD_LEFT & driveMotor = BWD;
  light_right_fwd := steeringMotor = LIGHT_RIGHT & driveMotor = FWD;
  light_right_bwd := steeringMotor = LIGHT_RIGHT & driveMotor = BWD;
  hard_right_fwd := steeringMotor = HARD_RIGHT & driveMotor = FWD;
  hard_right_bwd := steeringMotor = HARD_RIGHT & driveMotor = BWD;
  getCloser := (PREV(sideSense = 5) & (sideSense < 5)) | (PREV(sideSense = 4) & (sideSense < 4)) | (PREV(sideSense = 3) & (sideSense < 3)) | (PREV(sideSense = 2) & (sideSense < 2)) | (PREV(sideSense = 1) & (sideSense < 1));
  sideways := light_left_fwd | light_left_bwd | hard_left_fwd | hard_left_bwd | light_right_fwd | light_right_bwd | hard_right_fwd | hard_right_bwd;
  fwd_turning := (steeringMotor = HARD_LEFT | steeringMotor = HARD_RIGHT | steeringMotor = LIGHT_LEFT | steeringMotor = LIGHT_RIGHT) & forwarding;
  bwd_turning := (steeringMotor = HARD_LEFT | steeringMotor = HARD_RIGHT | steeringMotor = LIGHT_LEFT | steeringMotor = LIGHT_RIGHT) & reversing;

//Guarantees
//Initially we are not parked but starting a parking
gar 
mode = PARKING & driveMotor = STOP & steeringMotor = STRAIGHT & velocity=0;

gar
G steeringMotor != FWD & steeringMotor != BWD & steeringMotor != STOP;

gar
G driveMotor != HARD_LEFT & driveMotor != LIGHT_LEFT & driveMotor != STRAIGHT & driveMotor != LIGHT_RIGHT & driveMotor != HARD_RIGHT;

gar
G mode = PARKING -> velocity <= 1;


//When in parking mode we should keep at it until we are done
gar
G (mode = PARKING & done = true & align = true & color = BLUE ) -> (next(mode) = PARKING ); //need to change the nect step is to exit !!

gar
G (align = false) -> (next(mode) = PARKING);

gar
G(mode = PARKING & align = false & done = false) -> (next(steeringMotor)= HARD_RIGHT & next(driveMotor) = BWD);

gar
G(mode = PARKING & status = PARALLEL & align = true & done = false) -> (next(steeringMotor) = HARD_LEFT & next(driveMotor) = BWD & next(velocity) =1 & next(mode) = PARKING) ;

gar
G(mode = PARKING & status = REVERSE & align = true & done = false) -> (next(steeringMotor) = STRAIGHT & next(driveMotor) = BWD & next(velocity) =1 & next(mode) = PARKING) ;
//the connection between the Parking module and Search & Scan module.
//gar
//G (done = true & !valid_parking_spot) -> next(mode = SEARCHING);


//Enter the parking spot eventually
gar 
GF (mode = PARKED);

//The car should never stop dead in its track if the velocity is not zero.
gar
pRespondsToS(driveMotor = STOP, driveMotor != STOP | next(velocity) < velocity | velocity=0);

//TODO
gar
pRespondsToS(driveMotor != STOP, driveMotor = STOP | next(velocity) > velocity | velocity=5);

gar
G forwarding -> frontSense > 0;


//G driveMotor = STOP -> velocity = 0;
//define what mode = parked means
//gar
//G (mode = PARKED) <-> (valid_parking_spot = true);
gar
G(valid_parking_spot) -> (next(mode) = PARKED);

//Once we are parked we should stop moving.
gar
G(mode = PARKED -> stopping);

//Not moving means the velocity decreases or remains the same
gar
G driveMotor = STOP -> next(velocity) <= velocity;

//gar dontCrashSide:
//G sideSense >= 1;
//
//
//gar dontCrashFront:
//G frontSense >= 1;

//guarantee dontCrashSide:
//G (PREV(sideSense <= 1)) -> (!right);

//// beware when entering a parking spot or just going backwards
//gar
//G(driveMotor = BWD) -> ((PREV(senseMotor = SIDE)) & 
//  (PREV(backSense > 0 & stopping) & PREV(PREV(senseMotor = BACK))));

//Assumptions

//For testing purposes, we assume we found a parallel parking spot and we are above a the road which means the color sensor returns black
asm 
(status = REVERSE)  & (color =BLACK) & (sideSense >0 | frontSense>0) & (align = false) & (done = false);

//By driving backwards and to the right, eventauly we will get a new color.
asm
pRespondsToS((reversing) & (right) & (align = false), (align = true) | !((reversing) & (right))); //Take 1

asm
pRespondsToS((reversing) & (left) & (align = true), (color != BLUE) | !((reversing) & (left))); //Take 1
//GF ((reversing) & (right)) -> (color != BLACK); //Take 2

//Assume that there is a green parking spot
asm 
GF valid_parking_spot | stopping;

//asm
//G (align = false) -> (done = false);

//
asm
GF sideSense > 0 | stopping;

asm
GF frontSense > 0 | stopping;

//Once a parking spot has been found it wont move. Hopefully.
asm
G (status = PARALLEL) -> (next(status) = PARALLEL);

asm
G (status = REVERSE) -> (next(status) = REVERSE);

//asm
//G reversing -> next(frontSense) >= frontSense;

asm
G forwarding -> next(frontSense) <= frontSense;

//asm
//G (left & reversing) -> (next(sideSense) >= sideSense);

//asm
//G (right & reversing) -> (next(sideSense) <= sideSense);

asm
G (left & forwarding) -> (next(sideSense) >= sideSense);

asm
G (right & forwarding) -> (next(sideSense) <= sideSense);

asm
pRespondsToS(reversing, !reversing | (next(frontSense) = frontSense+1) | frontSense = 5);

asm
pRespondsToS(forwarding, !forwarding | (next(frontSense) = frontSense-1) | frontSense = 0);

asm
pRespondsToS(left & reversing, !left | !reversing | (next(sideSense) = sideSense+1) | sideSense = 5);

asm
pRespondsToS(right & reversing, !right | !reversing | (next(sideSense) = sideSense-1) | sideSense = 0);

asm
pRespondsToS(left & forwarding, !left | !forwarding | (next(sideSense) = sideSense+1) | sideSense = 5);

asm
pRespondsToS(right & forwarding, !right | !forwarding | (next(sideSense) = sideSense-1) | sideSense = 0);

asm
G stopping -> (next(sideSense) = sideSense & next(frontSense) = frontSense & next(color)=color & next(align) = align & next(done) = done);

asm
G steeringMotor = STRAIGHT -> next(sideSense) = sideSense;
