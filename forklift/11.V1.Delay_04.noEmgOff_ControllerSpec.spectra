///////////////////////////
// V1.Delay
///////////////////////////

module ControllerSpec

    env { CLEAR, BLOCKED } cargo ;
    env { CLEAR, BLOCKED } sense ;
    env boolean station ;

    sys { FWD, STOP, BWD } mLeft ;
    sys { FWD, STOP, BWD } mRight ;
    sys { LIFT, DROP, NIL } lift ;

    sys boolean spec_loaded ;

  define
    backing := mLeft = BWD & mRight = BWD;
    stopping := mLeft = STOP & mRight = STOP;
    turning := mLeft = BWD & mRight = FWD | mLeft = FWD & mRight = BWD;
    forwarding := mLeft = FWD & mRight = FWD;
    
    dropping := lift = DROP;
    lifting := lift = LIFT;
    
    lowObstacle := (cargo = BLOCKED & !station);

  // Environment Specification
  /////////////////////////////////////

  // A1 find cargo if going forward to next station
  assumption
  respondsTo((forwarding&!spec_loaded),((station&cargo=BLOCKED)|backing|stopping));
  assumption
  respondsTo((forwarding&spec_loaded),((station&cargo=CLEAR)|backing|stopping));

  // A2 leave station eventually
  assumption
  respondsTo((forwarding),(!station|stopping));
  assumption
  respondsTo((backing),(!station|stopping));
    
  // FIXME: the four specs above should also have turning 
  // because we might drive in circles
  // BUT this gives a strategy to the environment to present obstacles 
  // release itself from having to reach a station 
    
  // unblock path if backing or turning
  assumption
  respondsTo((backing|turning),((sense=CLEAR&cargo=CLEAR)|forwarding|stopping));

  // station does not change when stopping
  assumption
    G (stopping -> station = next(station));


  // System Specification
  ///////////////////////////////////////

  // initial state
  guarantee
    stopping & lift = NIL & !spec_loaded;

  // local var spec_loaded 
  //////////////////////////////////////
  guarantee
    G (lifting -> next (spec_loaded));
  guarantee
    G (dropping -> ! next (spec_loaded));
  guarantee
    G (lift = NIL -> next (spec_loaded) = spec_loaded);
 
  // G3 restricting lifting action based on var spec_loaded
  guarantee
    G (spec_loaded -> !lifting);

  guarantee
    G (!spec_loaded -> !dropping);
  ////////////////////////////////////////

  // G1 dont run into obstacles
  guarantee
    G ((sense = BLOCKED | lowObstacle) -> ! forwarding);
  // don't mess with low obstacles
  guarantee
    G (cargo=BLOCKED -> !turning);

  // don't lift if no cargo found
  guarantee
    G (cargo = CLEAR -> !lifting);
    
  // don't move while lifting or dropping
  guarantee
    G (lift != NIL -> stopping);

  // only turn, go, stop or back
  guarantee
    G (forwarding | turning | stopping | backing);

  // liveness of system
  ///////////////////////////////////////

  //G4
  guarantee
  GF ((lift=DROP)|lowObstacle);
    
    
///////////////////////
//  Patterns

--  GUARANTEE -- have to leave station to deliver 
--  (!atStation) occurs between 
--               (lift=LIFT) and (lift=DROP);  --P09    

  sys { S0, S1, S2} spec_stateGP1 ;

guarantee -- initial assignments: initial spec_stateGP1
  spec_stateGP1=S0;

guarantee -- safety this and next spec_stateGP1
  G ((spec_stateGP1=S0 & ((!(lift=LIFT) & !(!station)) | ((lift=LIFT) & (lift=DROP)) | (!(lift=DROP) & (!station)) | (!(lift=LIFT) & (lift=DROP) & (!station))) & next(spec_stateGP1=S0)) |
  (spec_stateGP1=S0 & ((lift=LIFT) & !(lift=DROP) & !(!station)) & next(spec_stateGP1=S1)) |
  (spec_stateGP1=S1 & (!(lift=DROP) & (!station)) & next(spec_stateGP1=S0)) |
  (spec_stateGP1=S1 & (!(lift=DROP) & !(!station)) & next(spec_stateGP1=S1)) |
  (spec_stateGP1=S1 & ((lift=DROP)) & next(spec_stateGP1=S2)) |
  (spec_stateGP1=S2 & next(spec_stateGP1=S2)));

guarantee -- equivalence of satisfaction
  GF (spec_stateGP1=S0|spec_stateGP1=S1);



--  ASSUMPTION -- at most blocked twice
--  After (!atStation) have at most two 
--    (lowObstacle) until (atStation);      --P15

  sys { S0, S1, S2, S3, S4, S5, S6} spec_stateAP1 ;

guarantee -- initial assignments: initial spec_stateAP1
  spec_stateAP1=S0;

guarantee -- safety this and next spec_stateAP1
  G ((spec_stateAP1=S0 & ((!(!station) & !station) | (station)) & next(spec_stateAP1=S0)) |
  (spec_stateAP1=S0 & ((!station) & !lowObstacle & !station) & next(spec_stateAP1=S1)) |
  (spec_stateAP1=S0 & ((!station) & lowObstacle & !station) & next(spec_stateAP1=S4)) |
  (spec_stateAP1=S1 & (station) & next(spec_stateAP1=S0)) |
  (spec_stateAP1=S1 & (!lowObstacle & !station) & next(spec_stateAP1=S1)) |
  (spec_stateAP1=S1 & (lowObstacle & !station) & next(spec_stateAP1=S4)) |
  (spec_stateAP1=S2 & next(spec_stateAP1=S2)) |
  (spec_stateAP1=S3 & (station) & next(spec_stateAP1=S0)) |
  (spec_stateAP1=S3 & (lowObstacle & !station) & next(spec_stateAP1=S2)) |
  (spec_stateAP1=S3 & (!lowObstacle & !station) & next(spec_stateAP1=S3)) |
  (spec_stateAP1=S4 & (station) & next(spec_stateAP1=S0)) |
  (spec_stateAP1=S4 & (lowObstacle & !station) & next(spec_stateAP1=S4)) |
  (spec_stateAP1=S4 & (!lowObstacle & !station) & next(spec_stateAP1=S5)) |
  (spec_stateAP1=S5 & (station) & next(spec_stateAP1=S0)) |
  (spec_stateAP1=S5 & (!lowObstacle & !station) & next(spec_stateAP1=S5)) |
  (spec_stateAP1=S5 & (lowObstacle & !station) & next(spec_stateAP1=S6)) |
  (spec_stateAP1=S6 & (station) & next(spec_stateAP1=S0)) |
  (spec_stateAP1=S6 & (!lowObstacle & !station) & next(spec_stateAP1=S3)) |
  (spec_stateAP1=S6 & (lowObstacle & !station) & next(spec_stateAP1=S6)));

assumption -- equivalence of satisfaction
  GF (spec_stateAP1=S0|spec_stateAP1=S1|spec_stateAP1=S3|spec_stateAP1=S4|spec_stateAP1=S5|spec_stateAP1=S6);
  
-- GUARANTEE  
-- Globally (lift!=DROP S lift=LIFT) after
--  (!atStation) until (atStation) --P20  

  sys { S0, S1, S2} spec_stateGP2 ;

guarantee -- initial assignments: initial spec_stateGP2
  spec_stateGP2=S0;

guarantee -- safety this and next spec_stateGP2
  G ((spec_stateGP2=S0 & ((!(!station) & !station) | (station)) & next(spec_stateGP2=S0)) |
  (spec_stateGP2=S0 & ((!station) & !(lift=NIL) & !station) & next(spec_stateGP2=S1)) |
  (spec_stateGP2=S0 & ((!station) & (lift=NIL) & !station) & next(spec_stateGP2=S2)) |
  (spec_stateGP2=S1 & next(spec_stateGP2=S1)) |
  (spec_stateGP2=S2 & (station) & next(spec_stateGP2=S0)) |
  (spec_stateGP2=S2 & (!(lift=NIL) & !station) & next(spec_stateGP2=S1)) |
  (spec_stateGP2=S2 & ((lift=NIL) & !station) & next(spec_stateGP2=S2)));

guarantee -- equivalence of satisfaction
  GF (spec_stateGP2=S0|spec_stateGP2=S2);


pattern respondsTo(trigger, response) {
  var boolean responded;
  responded;
  G (next(responded) iff (response or responded and !trigger));
  GF (responded);
}
