module Humanoid
		env {CLEAR, BLOCKED} Obstacle ;
		env {QUIET, NOISE} Noise ;
		env {N,SO} Heading;
		env {FREE, PRESSED} Button ;
		sys {FWD, BWD, STOP, TURN_FWD, TURN_BWD, CALIB_TURN, CALIB_FWD} LeftMotor ;
		sys {FWD, BWD, STOP, TURN_FWD, TURN_BWD, CALIB_TURN, CALIB_FWD} RightMotor ;
		sys {FWD, BWD, STOP} HeadMotor ;
		sys {FWD, BWD, TURN_LEFT} spec_nextMoveMode ;
		sys {Q0,Q1,Q2,Q3} spec_specState ;
		sys {T0,T1,T2,T3} spec_turnState ;
		sys {N,SO} spec_nextHead ;
		
////////////////////////////////////////////////////////////////
/*
 * initial state
 */
 ////////////////////////////////////////////////////////////////
guarantee
	spec_specState = Q0;
	
guarantee
	spec_turnState = T0;

guarantee
	spec_nextHead = SO;

guarantee
	spec_nextMoveMode = FWD;
	
assumption	
	Heading = N;
	
assumption
	Obstacle = CLEAR;
	
	
	





////////////////////////////////////////////////////////////////
/*
 * goals 
 */
 ////////////////////////////////////////////////////////////////
guarantee
  GF (spec_nextMoveMode=FWD);
	
////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////
/*
 * Main Restriction - do not run into walls
 */
 ////////////////////////////////////////////////////////////////
guarantee
	G((Obstacle = BLOCKED) -> (!(spec_nextMoveMode = FWD)));
////////////////////////////////////////////////////////////////		








////////////////////////////////////////////////////////////////
/*
 * 						MOTORS - CONTROL
 */
 ////////////////////////////////////////////////////////////////		
guarantee
	G(((spec_nextMoveMode = BWD) & next(spec_nextMoveMode = FWD)) <-> next(LeftMotor = FWD & RightMotor = BWD));

guarantee
	G(((spec_nextMoveMode = FWD) & next(spec_nextMoveMode = BWD)) <-> next(LeftMotor = BWD & RightMotor = FWD));
	
guarantee //Going backward can only start from a calibrated FWD movement
	G (next(spec_nextMoveMode = BWD) -> ((spec_nextMoveMode = FWD) | (spec_nextMoveMode = BWD)));
	
guarantee //From going backward it is only possible to go backwards or forwards 
	G (spec_nextMoveMode = BWD -> next((spec_nextMoveMode = FWD) | (spec_nextMoveMode = BWD)));
 ////////////////////////////////////////////////////////////////		



////////////////////////////////////////////////////////////////
/*
 * 							Q - AUTOMATON
 * to prevant robot from going FWD<-->BWD indefinitely 
 */
////////////////////////////////////////////////////////////////
guarantee 
	G((spec_specState = Q0 & spec_nextMoveMode = FWD & next(spec_nextMoveMode = BWD)) -> next(spec_specState = Q1));
	
guarantee 
	G((spec_specState = Q1 & spec_nextMoveMode = BWD & next(spec_nextMoveMode = FWD)) -> next(spec_specState = Q2));
	
guarantee
	G(!(spec_specState = Q2 & spec_nextMoveMode = FWD & next(spec_nextMoveMode = BWD)));

guarantee 
	G((spec_specState = Q1 & next(spec_nextMoveMode = BWD)) -> next(spec_specState = Q1));
	
guarantee 
	G((spec_specState = Q2 & next(spec_nextMoveMode = FWD)) -> next(spec_specState) = Q2);
	
guarantee
	G(spec_nextMoveMode = TURN_LEFT -> next(spec_specState = Q0));
////////////////////////////////////////////////////////////////







////////////////////////////////////////////////////////////////
/*
 * 						COMPASS - HANDELING
 */	
 ////////////////////////////////////////////////////////////////
 
/*
 * determine heading
 */
guarantee 
	G ((Button = PRESSED) -> next(spec_nextHead =  Heading));

guarantee 
	G ((Button = FREE) -> (next(spec_nextHead) = spec_nextHead));
	

/*
 *  trigger to start looking for saved direction
 */
guarantee
  respondsTo((Noise=NOISE),(Heading=spec_nextHead));
////////////////////////////////////////////////////////////////


 	
 	
 	
 





 ////////////////////////////////////////////////////////////////
/*
 * 					TURNNING - AUTOMATON
 */
 ////////////////////////////////////////////////////////////////
guarantee
	G (next(spec_turnState) = T0 -> (spec_turnState = T0 | spec_turnState = T3));
	
guarantee
	G ((spec_turnState = T0 & !(spec_nextMoveMode = TURN_LEFT)) -> next(spec_turnState) = T0);
	
guarantee
	G ((spec_nextMoveMode = TURN_LEFT & Y(spec_nextMoveMode = FWD) & spec_turnState = T0) -> next(spec_turnState) = T1);

guarantee
	G (spec_turnState = T1  -> (next(spec_turnState) = T2 & spec_nextMoveMode = TURN_LEFT));

guarantee
	G ((spec_turnState = T2 & spec_nextMoveMode = TURN_LEFT)  -> next(spec_turnState) = T1);
	
guarantee
	G ((spec_turnState = T2 & spec_nextMoveMode = FWD) -> next(spec_turnState) = T3);
	
guarantee
	G ((spec_turnState = T3 & spec_nextMoveMode = FWD) -> next(spec_turnState = T0));

guarantee
	G ((spec_turnState = T3 & spec_nextMoveMode != FWD) -> next(spec_turnState = T2));
	
//LTLSPEC
	//G (spec_nextMoveMode = TURN_LEFT <-> (next(spec_turnState) = T1 | next(spec_turnState) = T2));
	
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
/*
 * 						MOVEMENT - TURNNING
 * 
 * 
 * Some technical limitations on the movement
 * Starting to turn and stoping needs a calibration from FWD movement
 */
 ////////////////////////////////////////////////////////////////

guarantee
	G ((spec_turnState = T0 & next(spec_turnState) = T1) <-> (LeftMotor = CALIB_TURN & RightMotor = CALIB_TURN)); 

guarantee
	G (next(spec_turnState) = T2 <-> (LeftMotor = FWD & RightMotor = TURN_FWD));
	
guarantee
	G (spec_turnState = T2 <-> (LeftMotor = BWD & RightMotor = TURN_BWD));
	
guarantee
	G ((spec_turnState = T3 & next(spec_turnState = T0)) <-> (LeftMotor = CALIB_FWD & RightMotor = CALIB_FWD));

////////////////////////////////////////////////////////////////
/*
 * 						ENVIRONMENT - ASSUMPTIONS
 * 
 */
 ////////////////////////////////////////////////////////////////

assumption
	G ((Y(spec_nextMoveMode = FWD) & Obstacle = BLOCKED) -> next(Obstacle = BLOCKED));
	//G((spec_nextMoveMode != FWD) -> F(Obstacle = CLEAR));

assumption
	G((Y(spec_nextMoveMode = BWD) & Obstacle = CLEAR) -> (next(Obstacle != BLOCKED)));
	
assumption
  respondsTo((spec_turnState=T1),(Obstacle=CLEAR&next(Obstacle)=CLEAR));
	
assumption
	G(((spec_nextMoveMode = FWD | spec_nextMoveMode = BWD)) -> next(Heading) = Heading);

assumption
  respondsTo((spec_nextMoveMode=TURN_LEFT),(Heading=spec_nextHead|spec_nextMoveMode!=TURN_LEFT));

//LTLSPECENV
//  G F (Button = PRESSED);

pattern respondsTo(trigger, response) {
  var boolean responded;
  responded;
  G (next(responded) iff (response or responded and !trigger));
  GF (responded);
}
