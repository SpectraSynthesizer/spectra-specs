module ColorSort
		env {RED, GREEN, BLUE, BLACK, YELLOW , WHITE} color ;
		env {RED, GREEN, BLUE, BLACK, YELLOW , WHITE} detect ;
		env {MOVE, SLEEP} ack_ver ;
		env {MOVE, SLEEP} ack_hor ;
		env {MOVE, SLEEP} ack_bot ;
		
		env {PRESS, RELEASE} speedButton;
		sys {MOVE, SLEEP} verMot ;
		sys {MOVE, SLEEP} horMot ;
		sys {SEEK, STOP, RETURN} botMot ;
		
		sys {LEVEL1, LEVEL2, LEVEL3} motSpeed;
		
		sys { S0, S1, S2} spec_state__seek ;
		
		sys {RED, GREEN, BLUE, BLACK, YELLOW , WHITE} spec_currentColor;
		sys boolean spec_dropping ;
		
		sys boolean spec_speedButtonValidPressed ;
		
		
define -- spec_allsleep is true iff all motors sleep
	spec_allsleep := verMot = SLEEP  & horMot = SLEEP & botMot = STOP;
define -- spec_nonemove is true iff no motor moves
	spec_nonemove := ack_ver = SLEEP & ack_hor = SLEEP & ack_bot = SLEEP;

guarantee -- only one motors moves at a time
	G (verMot = MOVE -> (botMot = STOP & horMot = SLEEP));
	
guarantee 
	G (horMot = MOVE -> (botMot = STOP & verMot = SLEEP));
	
guarantee 
	G (botMot != STOP -> (verMot = SLEEP & horMot = SLEEP));

guarantee
	G (verMot = SLEEP -> spec_currentColor = next(spec_currentColor));
	
guarantee
	G (spec_dropping = next(spec_dropping) <-> verMot = SLEEP & !(PREV(botMot = RETURN) & ack_bot = SLEEP));
	
guarantee
	G (ack_ver = MOVE | ack_hor = MOVE -> spec_allsleep);
	
assumption
	G (!spec_dropping -> spec_nonemove);
	
assumption
	G (ack_hor = MOVE <-> detect = spec_currentColor & (PREV(horMot = MOVE) | PREV(ack_hor = MOVE)));
	
assumption
	G (horMot = MOVE -> PREV(ack_ver = SLEEP));
	
-- running the robot

guarantee
	G (spec_dropping -> verMot = SLEEP);
	
guarantee
	G (!spec_dropping -> botMot = STOP & horMot = SLEEP);

guarantee
	G (color = BLACK & !spec_dropping -> spec_allsleep);
	
guarantee
	G (color != BLACK & !spec_dropping -> verMot = MOVE & next(spec_currentColor) = color & next(spec_dropping));
	 
guarantee
	G (ack_ver = SLEEP & PREV(ack_ver = MOVE) & spec_dropping -> botMot = SEEK);

guarantee -- initial assignments: initial spec_state__seek
  spec_state__seek=S0;

guarantee -- safety this and next spec_state__seek
  G ((spec_state__seek=S0 & ((!(botMot = SEEK) & !(detect = spec_currentColor)) | ((detect = spec_currentColor))) & next(spec_state__seek=S0)) |
  (spec_state__seek=S0 & ((botMot = SEEK) & !(botMot = SEEK) & !(detect = spec_currentColor)) & next(spec_state__seek=S1)) |
  (spec_state__seek=S0 & ((botMot = SEEK) & (botMot = SEEK) & !(detect = spec_currentColor)) & next(spec_state__seek=S2)) |
  (spec_state__seek=S1 & next(spec_state__seek=S1)) |
  (spec_state__seek=S2 & ((detect = spec_currentColor)) & next(spec_state__seek=S0)) |
  (spec_state__seek=S2 & (!(botMot = SEEK) & !(detect = spec_currentColor)) & next(spec_state__seek=S1)) |
  (spec_state__seek=S2 & ((botMot = SEEK) & !(detect = spec_currentColor)) & next(spec_state__seek=S2)));

assumption -- equivalence of satisfaction
  GF (spec_state__seek=S0|spec_state__seek=S2);

guarantee
	G (spec_dropping & detect = spec_currentColor & PREV(botMot != STOP) <-> horMot = MOVE);

-- speed button

guarantee
	motSpeed = LEVEL1 & !spec_dropping;

guarantee
	G (speedButton = PRESS & PREV(speedButton = RELEASE) <-> spec_speedButtonValidPressed);


guarantee -- if the speed button is pressed, increase the speed by one level
	G (spec_speedButtonValidPressed & PREV(motSpeed = LEVEL1) -> motSpeed = LEVEL2);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (spec_speedButtonValidPressed & PREV(motSpeed = LEVEL2) -> motSpeed = LEVEL3);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (spec_speedButtonValidPressed & PREV(motSpeed = LEVEL3) -> motSpeed = LEVEL1);
	 
	 
guarantee -- if the speed button is released, the speed remains the same
	G (!spec_speedButtonValidPressed & PREV(motSpeed = LEVEL1) -> motSpeed = LEVEL1);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (!spec_speedButtonValidPressed & PREV(motSpeed = LEVEL2) -> motSpeed = LEVEL2);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (!spec_speedButtonValidPressed & PREV(motSpeed = LEVEL3) -> motSpeed = LEVEL3);


-- Some environment specifications

assumption -- there will always be a cube
  GF (color!=BLACK);
