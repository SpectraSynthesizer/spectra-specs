module ColorSort
		env {RED, GREEN, BLUE, BLACK, YELLOW , WHITE} color ;
		env {RED, GREEN, BLUE, BLACK, YELLOW , WHITE} detect ;
		env {MOVE, SLEEP} ack_ver ;
		env {MOVE, SLEEP} ack_hor ;
		env {MOVE, SLEEP} ack_bot ;
		
		env {PRESS, RELEASE} speedButton;
		sys {MOVE, SLEEP} verMot ;
		sys {MOVE, SLEEP} horMot ;
		sys {SEEK, STOP, RETURN} botMot ;
		
		sys {LEVEL1, LEVEL2, LEVEL3} motSpeed;
		
		sys { S0, S1, S2, S3} spec_state_return ;
		
		sys {RED, GREEN, BLUE, BLACK, YELLOW , WHITE} spec_currentColor;
		sys boolean spec_dropping ;
		
		sys boolean spec_speedButtonValidPressed ;
		
		
define -- allsleep is true iff all motors sleep
	allsleep := verMot = SLEEP  & horMot = SLEEP & botMot = STOP;
define -- nonemove is true iff no motor moves
	nonemove := ack_ver = SLEEP & ack_hor = SLEEP & ack_bot = SLEEP;
define -- nonemove is true iff no motor moves
	onlybotmoves := ack_ver = SLEEP & ack_hor = SLEEP & ack_bot = MOVE;

guarantee
  G(spec_prevBotMotReturn<->PREV(botMot = RETURN));
  
  sys boolean spec_prevBotMotReturn ;

guarantee -- only one motors moves at a time
	G (verMot = MOVE -> (botMot = STOP & horMot = SLEEP));
	
guarantee 
	G (horMot = MOVE -> (botMot = STOP & verMot = SLEEP));
	
guarantee 
	G (botMot != STOP -> (verMot = SLEEP & horMot = SLEEP));

guarantee
	G (verMot = SLEEP -> spec_currentColor = next(spec_currentColor));
	
guarantee
	G (spec_dropping = next(spec_dropping) <-> verMot = SLEEP & !(spec_prevBotMotReturn & nonemove));
/* 	*/
guarantee
	G (ack_ver = MOVE | ack_hor = MOVE -> allsleep);
	
assumption
	G (!spec_dropping -> nonemove);
	
-- running the robot

guarantee
	G (color = BLACK & !spec_dropping -> allsleep);
	
guarantee
	G (color != BLACK & !spec_dropping -> verMot = MOVE & next(spec_currentColor) = color);
	 
guarantee
	G ((nonemove & spec_dropping & PREV(ack_hor != MOVE)) | (PREV(botMot = SEEK) & onlybotmoves & detect != spec_currentColor) -> botMot = SEEK);

guarantee
	G (spec_dropping & onlybotmoves & detect = spec_currentColor & PREV(botMot = SEEK) <-> horMot = MOVE);
 	
guarantee
	G (nonemove & PREV(ack_hor = MOVE) & spec_dropping -> botMot = RETURN);
-- P19
-- (spec_dropping & onlybotmoves -> botMot = RETURN) is true between (spec_prevBotMotReturn & ack_bot = MOVE) and (spec_prevBotMotReturn & ack_bot = SLEEP)
guarantee -- initial assignments: initial spec_state_return
  spec_state_return=S0;

guarantee -- safety this and next spec_state_return
  G ((spec_state_return=S0 & ((!(spec_prevBotMotReturn & ack_bot = MOVE)) | ((spec_prevBotMotReturn & ack_bot = SLEEP) & (spec_prevBotMotReturn & ack_bot = MOVE))) & next(spec_state_return=S0)) |
  (spec_state_return=S0 & (!(spec_prevBotMotReturn & ack_bot = SLEEP) & (spec_dropping & onlybotmoves -> botMot = RETURN) & (spec_prevBotMotReturn & ack_bot = MOVE)) & next(spec_state_return=S1)) |
  (spec_state_return=S0 & (!(spec_prevBotMotReturn & ack_bot = SLEEP) & !(spec_dropping & onlybotmoves -> botMot = RETURN) & (spec_prevBotMotReturn & ack_bot = MOVE)) & next(spec_state_return=S3)) |
  (spec_state_return=S1 & ((spec_prevBotMotReturn & ack_bot = SLEEP)) & next(spec_state_return=S0)) |
  (spec_state_return=S1 & (!(spec_prevBotMotReturn & ack_bot = SLEEP) & (spec_dropping & onlybotmoves -> botMot = RETURN)) & next(spec_state_return=S1)) |
  (spec_state_return=S1 & (!(spec_prevBotMotReturn & ack_bot = SLEEP) & !(spec_dropping & onlybotmoves -> botMot = RETURN)) & next(spec_state_return=S3)) |
  (spec_state_return=S2 & next(spec_state_return=S2)) |
  (spec_state_return=S3 & ((spec_prevBotMotReturn & ack_bot = SLEEP)) & next(spec_state_return=S2)) |
  (spec_state_return=S3 & (!(spec_prevBotMotReturn & ack_bot = SLEEP)) & next(spec_state_return=S3)));

guarantee -- equivalence of satisfaction
  GF (spec_state_return=S0|spec_state_return=S1|spec_state_return=S3);
/* 
LTLSPEC
	G (spec_dropping & PREV(botMot) = RETURN & nonemove -> allsleep);
*/
-- speed button

guarantee
	motSpeed = LEVEL1 & !spec_dropping;

guarantee
	G (speedButton = PRESS & PREV(speedButton = RELEASE) <-> spec_speedButtonValidPressed);


guarantee -- if the speed button is pressed, increase the speed by one level
	G (spec_speedButtonValidPressed & PREV(motSpeed = LEVEL1) -> motSpeed = LEVEL2);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (spec_speedButtonValidPressed & PREV(motSpeed = LEVEL2) -> motSpeed = LEVEL3);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (spec_speedButtonValidPressed & PREV(motSpeed = LEVEL3) -> motSpeed = LEVEL1);
	 
	 
guarantee -- if the speed button is released, the speed remains the same
	G (!spec_speedButtonValidPressed & PREV(motSpeed = LEVEL1) -> motSpeed = LEVEL1);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (!spec_speedButtonValidPressed & PREV(motSpeed = LEVEL2) -> motSpeed = LEVEL2);
	
guarantee -- if the speed button is pressed, increase the speed by one level
	G (!spec_speedButtonValidPressed & PREV(motSpeed = LEVEL3) -> motSpeed = LEVEL3);


-- Some environment specifications

  sys boolean spec_waiting_ack_ver_mot;
  sys boolean spec_waiting_ack_hor_mot;

guarantee -- initial state
  !spec_waiting_ack_ver_mot; -- not waiting for acknowledgement (only sleeping is allowed)
  
guarantee -- transitions
  G(!spec_waiting_ack_ver_mot & verMot!=MOVE -> next(!spec_waiting_ack_ver_mot));
guarantee
  G (!spec_waiting_ack_ver_mot & verMot=MOVE -> next(spec_waiting_ack_ver_mot));
guarantee
  G (spec_waiting_ack_ver_mot & ack_ver=SLEEP -> next(!spec_waiting_ack_ver_mot));
guarantee
  G (spec_waiting_ack_ver_mot & ack_ver!=SLEEP -> next(spec_waiting_ack_ver_mot));

assumption -- while we are not waiting motor can only acknowledge sleeping
  G(!spec_waiting_ack_ver_mot -> ack_ver=SLEEP);
assumption -- if we are waiting motor has to eventually acknowledge finishing
  respondsTo(spec_waiting_ack_ver_mot,(ack_ver=SLEEP));
  
guarantee -- initial state
  !spec_waiting_ack_hor_mot; -- not waiting for acknowledgement (only sleeping is allowed)
  
guarantee -- transitions
  G(!spec_waiting_ack_hor_mot & horMot!=MOVE -> next(!spec_waiting_ack_hor_mot));
guarantee
  G (!spec_waiting_ack_hor_mot & horMot=MOVE -> next(spec_waiting_ack_hor_mot));
guarantee
  G (spec_waiting_ack_hor_mot & ack_hor=SLEEP -> next(!spec_waiting_ack_hor_mot));
guarantee
  G (spec_waiting_ack_hor_mot & ack_hor!=SLEEP -> next(spec_waiting_ack_hor_mot));

assumption -- while we are not waiting motor can only acknowledge sleeping
  G(!spec_waiting_ack_hor_mot -> ack_hor=SLEEP);
assumption -- if we are waiting motor has to eventually acknowledge finishing
  respondsTo(spec_waiting_ack_hor_mot,(ack_hor=SLEEP));
  
  
assumption -- there will always be a cube
  GF (color!=BLACK);

pattern respondsTo(trigger, response) {
  var boolean responded;
  responded;
  G (next(responded) iff (response or responded and !trigger));
  GF (responded);
}
