// Initial file contents for AspectLTL aspect file (*.altl)
module PCar
 env {CLEAR, BLOCKED} obstacle ;
 env {CLOSE, CENTERED, FAR, CLOSE_PARKING, PARALLEL_PARKING ,PERPENDICULAR} sideSense;
 env {NA,PARALLEL} parkResult;
 env {BLACK, GREEN, RED} colorSense;
 env {FREE, PRESSED} reset;
 
 sys {FWD, BWD, STOP,BLOCKING_BWD, BLOCKING_FWD, EXIT_FWD} throttle ;
 sys {RIGHT,LEFT, CENTER, EASY_RIGHT, EASY_LEFT} steer ;
 sys {START,STOP,CHECK} parkCommand ;
 sys {SEEKING,MEASURING,PARKING_0,PARKING_1,PARKING_2,PARKED, EXIT_0,EXIT_1} policy;


//initial state -- seeking for a parking space
guarantee
( policy=SEEKING);

-----------
-- GOALS --
-----------
//Goal State - be at a parked state.
guarantee
  GF (policy=PARKED&colorSense=GREEN);
 
 guarantee
 -------------------------
 -- ALLOWED TRANSITIONS --
 ------------------------- 
 G((policy = SEEKING)-> (next(policy)=SEEKING| next(policy) = MEASURING| next(policy) = PARKING_0));
 guarantee
 G ((policy = SEEKING) -> ((throttle = FWD | throttle = STOP | throttle = BWD)));
 guarantee
  G ((policy = SEEKING & obstacle = CLEAR) -> (!(steer = RIGHT | steer = LEFT )));

 
 guarantee
 G((policy = MEASURING)-> (next(policy)=SEEKING| next(policy) = MEASURING| next(policy) = PARKING_0));
  guarantee
 G ((policy = MEASURING) -> (throttle != BLOCKING_BWD & parkCommand != START & (steer = CENTER | steer = EASY_LEFT | steer = EASY_RIGHT)));
 
 
 guarantee
 G((policy = PARKING_0)-> (next(policy)=(PARKING_1)));
 guarantee
 G((policy = PARKING_1)-> (next(policy)=(PARKING_2)));
 guarantee
 G((policy = PARKING_2)-> (next(policy)=(PARKED)));
 guarantee
 G((policy = PARKED)-> (next(policy)=(PARKED) | next(policy)=(EXIT_0)));
 guarantee
 G((policy = EXIT_0)-> (next(policy)=(EXIT_1)));
 guarantee
 G((policy = EXIT_1)-> (next(policy)=(SEEKING)));
// LTLSPEC
// G((policy = EXIT_2)-> (next(policy)=(SEEKING)));
 

------------------
-- SAFTEY SPECS --
------------------

guarantee
 G (((obstacle = CLEAR) & (policy=SEEKING) & parkResult = NA)->(throttle = FWD));


//if blocked when looking for parking space dont start parking & don't run into obstacles 
guarantee
 G(((obstacle=BLOCKED) & (policy = SEEKING | policy = MEASURING)) ->(next(policy) = SEEKING) & !(throttle = FWD | throttle = BLOCKING_FWD | throttle = BLOCKING_BWD) & !(steer = EASY_RIGHT | steer = EASY_LEFT));
 
//if blocked stop  timing the distance of the parking spot 
guarantee
 G((obstacle=BLOCKED)->(parkCommand=STOP));
 
guarantee
G ((policy = SEEKING & parkResult=NA) -> (throttle != STOP));

------------------------
-- SEEKING ALLIGNMENT --
------------------------
 guarantee
 G((policy=SEEKING & obstacle = CLEAR & PREV(obstacle = BLOCKED)) -> (steer=CENTER));
 
 //Allign left
 guarantee
 G((policy=SEEKING & obstacle = CLEAR &  sideSense = CLOSE & PREV(obstacle = CLEAR)) -> (steer=EASY_LEFT));
 
  //Allign right
 guarantee
 G((policy=SEEKING & obstacle = CLEAR &  sideSense = FAR & PREV(obstacle = CLEAR)) -> (steer=EASY_RIGHT));
 
 //Allign center
 guarantee
 G((policy=SEEKING & obstacle = CLEAR &  sideSense = CENTERED & (PREV(sideSense = CENTERED)) & PREV(obstacle = CLEAR)) -> (steer=CENTER));
 
 guarantee
 G((policy = SEEKING & obstacle = CLEAR & PREV(sideSense = FAR) & sideSense = CENTERED & PREV(obstacle = CLEAR)) ->
 (steer=EASY_LEFT));
 
 guarantee
 G((policy = SEEKING & obstacle = CLEAR & PREV(sideSense = CLOSE) & sideSense = CENTERED & PREV(obstacle = CLEAR)) ->
 (steer=EASY_RIGHT));
 
 
  //Allign left
 guarantee
 --------------------------
 -- MEASURING ALLIGNMENT --
 --------------------------
 G((policy=MEASURING & obstacle = CLEAR &  sideSense = CLOSE_PARKING) -> (steer=EASY_LEFT));
 
  //Allign right
 guarantee
 G((policy=MEASURING & obstacle = CLEAR &  sideSense = PERPENDICULAR) -> (steer=EASY_RIGHT));

  //Allign center
 guarantee
 G((policy=MEASURING & obstacle = CLEAR &  sideSense = PARALLEL_PARKING & PREV(sideSense = PARALLEL_PARKING)) -> (steer=CENTER));
 guarantee
 G((policy=MEASURING & obstacle = CLEAR &  sideSense = PARALLEL_PARKING & PREV(sideSense = CLOSE_PARKING)) -> (steer=EASY_RIGHT));
 guarantee
 G((policy=MEASURING & obstacle = CLEAR &  sideSense = PARALLEL_PARKING & PREV(sideSense = PERPENDICULAR)) -> (steer=EASY_LEFT));
 
-----------------------
-- STATE TRANSITIONS --
----------------------- 
 
//Seeking --> Seeking
guarantee
G(((policy = SEEKING) & (sideSense = CLOSE | sideSense = CENTERED | sideSense = FAR))
-> ((next(policy) = policy) & (parkCommand = STOP)));


//Seeking --> Measuring
guarantee
 G (((policy = SEEKING) & !(sideSense = CLOSE | sideSense = CENTERED | sideSense = FAR) & (obstacle = CLEAR))
 -> (next(policy) = MEASURING) & throttle=FWD & parkCommand=START & steer = CENTER);
 

//Measuring --> Seeking 
guarantee
 G (((policy = MEASURING) & (sideSense = CLOSE | sideSense = CENTERED | sideSense = FAR) &(parkResult =NA))
 -> (next(policy) = SEEKING)  & (parkCommand = STOP));

//Measuring --> Measuring

guarantee
 G (((policy = MEASURING) & !(sideSense = CLOSE | sideSense = CENTERED | sideSense = FAR) & (obstacle = CLEAR) &(parkResult =NA))
 -> (next(policy) = policy) & throttle=FWD & parkCommand=CHECK);
 
 //Measuring --> Parking_0
guarantee
 G (((((policy = MEASURING & sideSense = PARALLEL_PARKING)|(policy=SEEKING & PREV(sideSense = PARALLEL_PARKING) & PREV(policy=MEASURING)))) & (obstacle = CLEAR) &(parkResult =PARALLEL))
 -> (next(policy) = PARKING_0) & (throttle = STOP) & (parkCommand = STOP) );

//Parking_0--> Parking_1 
guarantee
 G ((policy = PARKING_0)
 -> (next(policy) = PARKING_1) & (throttle = BLOCKING_FWD) & steer = CENTER & (parkCommand = STOP));
 
 //Parking_1--> Parking_2 
guarantee
 G ((policy = PARKING_1)
 -> (next(policy) = PARKING_2) & (throttle = BLOCKING_BWD) & steer = RIGHT & (parkCommand = STOP));

 
 //Parking_2--> Parked 
guarantee
 G ((policy = PARKING_2)
 -> (next(policy) = PARKED) & (throttle = BLOCKING_BWD) & steer = LEFT & (parkCommand = STOP));


//Parked--> Parked 
guarantee
 G (((policy = PARKED) & colorSense = GREEN & reset = FREE)
 -> (next(policy) = policy) & (throttle = STOP) & (steer = CENTER) & (parkCommand = STOP));
 
//Parked-->Exit_0
guarantee
 G (((policy = PARKED) & (!(colorSense = GREEN) | reset = PRESSED ))
 -> (next(policy) = EXIT_0) & (throttle = EXIT_FWD) & (steer = LEFT) & (parkCommand = STOP));

//Exit_0-->Exit_1 
guarantee
 G (((policy = EXIT_0))
 -> (next(policy) = EXIT_1) & (throttle = EXIT_FWD) & (steer = RIGHT) & (parkCommand = STOP));

//Exit_1-->Seeking
guarantee
 G (((policy = EXIT_1))
 -> (next(policy) = SEEKING) & (steer = CENTER) & (throttle = STOP));
 
-----------------------------
-- ENIVRONMENT ASSUMPTIONS --
-----------------------------
 
assumption
G ((policy = SEEKING)->next(parkResult = NA));

assumption
  GF ((policy=MEASURING)&(parkResult=PARALLEL)&(obstacle=CLEAR));

assumption
parkResult = NA & reset = FREE;

assumption
  respondsTo((throttle=BWD),(obstacle=CLEAR));

assumption
 G ((throttle=STOP)->((obstacle=next(obstacle))&(sideSense=next(sideSense))));
 
assumption
G ((policy != PARKED) -> next(colorSense = BLACK));

assumption
  GF ((policy=PARKED&colorSense=GREEN&reset=FREE));

 

pattern respondsTo(trigger, response) {
  var boolean responded;
  responded;
  G (next(responded) iff (response or responded and !trigger));
  GF (responded);
}
