// Initial file contents for AspectLTL aspect file (*.altl)
module PCar
		env {CLEAR, BLOCKED} obstacle ;
		env {CLEAR,P_O, BLOCKED} sideSense;
		env {NA,PARALLEL} parkResult;
//		new emgButton: boolean;
		sys {FWD, BWD, STOP} throttle ;
		sys {RIGHT,LEFT, CENTER} steer ;
		sys {START,STOP,CHECK} parkCommand ;
		sys boolean spec_park;
		sys {SEEKING,MEASURING,PARKING,PARKED} spec_policy;

//LTLSPEC //initial state
//	(throttle = STOP & steer= CENTER & spec_policy = SEEKING & parkCommand = STOP & !spec_park);

guarantee
	spec_policy=SEEKING & !spec_park;

guarantee//goal 
  GF (spec_park);

guarantee
	G(!next(spec_park) -> !next(spec_policy = PARKED));
guarantee
	G(next(spec_park) -> next(spec_policy = PARKED));	
//LTLSPEC
//	G F ( (throttle = FWD) & (steer = CENTER) );	
guarantee
  respondsTo(!(spec_policy=PARKED),!(throttle=STOP));
guarantee
	G (((spec_policy=SEEKING|spec_policy=MEASURING)& obstacle = BLOCKED)->(throttle = BWD));
guarantee
	G (((spec_policy=PARKING|spec_policy=PARKED)& obstacle = BLOCKED)->!(throttle = FWD));
guarantee
	G ((sideSense = BLOCKED) -> !(steer =RIGHT));
//spec_policy state tarnsition restrictions
guarantee
	G (((spec_policy = SEEKING) & (sideSense=BLOCKED) & (obstacle=CLEAR))
		-> (next(spec_policy=SEEKING) & throttle=FWD & parkCommand=STOP &steer = CENTER) );
guarantee
	G (((spec_policy = SEEKING) & (sideSense=BLOCKED))
		-> (next(spec_policy=SEEKING) & parkCommand=STOP &steer = CENTER) );


guarantee
	G (((spec_policy = SEEKING) & (sideSense=CLEAR | sideSense = P_O) & (obstacle = CLEAR) &(parkResult =NA))
		-> (next(spec_policy = MEASURING)&throttle=FWD & parkCommand=START & steer = CENTER));
guarantee
	G (((spec_policy = MEASURING) & (sideSense=CLEAR | sideSense = P_O)& (obstacle = CLEAR) &(parkResult =NA))
		-> (next(spec_policy = MEASURING)&throttle=FWD & parkCommand=CHECK & steer = CENTER));
guarantee
	G (((spec_policy = MEASURING) & (sideSense=CLEAR | sideSense = P_O)& (obstacle = CLEAR) &(parkResult =PARALLEL))
		-> (next(spec_policy = PARKING) & (throttle = STOP) & (parkCommand = STOP) & steer = CENTER)
	);
guarantee
	G (((spec_policy = MEASURING) & (sideSense=BLOCKED) & (obstacle = CLEAR) & (parkResult =PARALLEL)) 
		-> (next(spec_policy = PARKING) & (throttle = STOP) & (parkCommand = STOP))
	);
guarantee
	G (((spec_policy = MEASURING) & (sideSense=BLOCKED)& (obstacle = CLEAR) &(parkResult =NA))
		-> (next(spec_policy = SEEKING) & (throttle = FWD) & (parkCommand = STOP))
	);
guarantee
	G ( (spec_policy = PARKING) -> (next(spec_policy = PARKED)));
guarantee
	G (((spec_policy = PARKED))
		-> (next(spec_policy = PARKED) & (throttle = STOP) & (steer = LEFT) & (parkCommand = STOP))
	);
guarantee
	G(((obstacle=BLOCKED) &!(spec_policy=PARKING | spec_policy = PARKED))->(next(spec_policy = SEEKING)));
	
guarantee
	G((obstacle=BLOCKED)->(parkCommand=STOP));


assumption
  respondsTo((throttle=BWD),(obstacle=CLEAR));

assumption
	G ((throttle=STOP)->((obstacle=next(obstacle))&(sideSense=next(sideSense))));

assumption
  respondsTo((spec_policy=SEEKING),(spec_policy=PARKING));
assumption
	G ((spec_policy = SEEKING) -> (parkResult = NA));
assumption
	parkResult = NA ;



//LTLSPEC
//	G ((spec_spec_park) ->F((obstacle = BLOCKED) & (sideSense = BLOCKED)));

//LTLSPECENV
//	G((!((spec_policy = spec_parkING) | (spec_policy = MEASURING) | (spec_policy = spec_parkED )) -> !next(spec_park) ));
//
//LTLSPECENV
//	G((spec_park & (spec_policy = spec_parkED) -> next(spec_park)));

//VAR -- auxiliary variables States of DBW
//  new spec_b2f : { S0, S1, S2};
//
//LTLSPEC -- initial assignments: initial state
//  spec_b2f=S0;
//
//LTLSPEC -- safety this and next spec_b2f
//  G((spec_b2f=S0 & ((!(throttle = BWD) & !(throttle = STOP)) | 
//  		(throttle = BWD & throttle = FWD) | 
//  		(!(throttle = FWD) & throttle = STOP) | 
//  		(!(throttle = BWD) & throttle = FWD & throttle = STOP)) & next(spec_b2f=S0)) |
//  (spec_b2f=S0 & (throttle = BWD & !(throttle = FWD) & !(throttle = STOP)) & next(spec_b2f=S1)) |
//  (spec_b2f=S1 & (!(throttle = FWD) & throttle = STOP) & next(spec_b2f=S0)) |
//  (spec_b2f=S1 & (!(throttle = FWD) & !(throttle = STOP)) & next(spec_b2f=S1)) |
//  (spec_b2f=S1 & (throttle = FWD) & next(spec_b2f=S2)) |
//  (spec_b2f=S2 & TRUE & next(spec_b2f=S2)));
//
//LTLSPEC -- equivalence of satisfaction
//  (G F (spec_b2f=S0 | spec_b2f=S1));
//  
//VAR -- auxiliary variables States of DBW
//  new spec_f2b : { S0, S1, S2};
//
//LTLSPEC -- initial assignments: initial state
//  spec_f2b=S0;
//
//LTLSPEC -- safety this and next spec_b2f
//  G((spec_f2b=S0 & ((!(throttle = FWD) & !(throttle = STOP)) | 
//  		(throttle = FWD & throttle = BWD) | 
//  		(!(throttle = BWD) & throttle = STOP) | 
//  		(!(throttle = FWD) & throttle = BWD & throttle = STOP)) & next(spec_f2b=S0)) |
//  (spec_f2b=S0 & (throttle = FWD & !(throttle = BWD) & !(throttle = STOP)) & next(spec_f2b=S1)) |
//  (spec_f2b=S1 & (!(throttle = BWD) & throttle = STOP) & next(spec_f2b=S0)) |
//  (spec_f2b=S1 & (!(throttle = BWD) & !(throttle = STOP)) & next(spec_f2b=S1)) |
//  (spec_f2b=S1 & (throttle = BWD) & next(spec_f2b=S2)) |
//  (spec_f2b=S2 & TRUE & next(spec_f2b=S2)));
//
//LTLSPEC -- equivalence of satisfaction
//  (G F (spec_f2b=S0 | spec_f2b=S1));
//LTLSPECENV
//	G (((throttle = FWD) & (steer=CENTER))  -> F!(sideSense = BLOCKED));
pattern respondsTo(trigger, response) {
  var boolean responded;
  responded;
  G (next(responded) iff (response or responded and !trigger));
  GF (responded);
}
