// Initial file contents for AspectLTL aspect file (*.altl)
module PCar
 env {CLEAR, BLOCKED} obstacle ;
 env {CLEAR, BLOCKED} sideSense;
 env {NA,PARALLEL} parkResult;
 
// new emgButton: boolean;
 sys {FWD, BWD, STOP} throttle ;
 sys {RIGHT,LEFT, CENTER} steer ;
 sys {START,STOP,CHECK} parkCommand ;
 sys {SEEKING,MEASURING,PARKING_0,PARKING_1,PARKING_2,PARKED} spec_policy;



//initial state - NOT parking & currently seeking for a parking space
guarantee
( spec_policy=SEEKING );

//Goal State - be at a parked state.
guarantee
  GF (spec_policy=PARKED);
 
 
 //allowed state transitions
 
 guarantee
 G((spec_policy = SEEKING)-> (next(spec_policy)=SEEKING| next(spec_policy) = MEASURING| next(spec_policy) = PARKING_0));
 guarantee
 G((spec_policy = MEASURING)-> (next(spec_policy)=SEEKING| next(spec_policy) = MEASURING| next(spec_policy) = PARKING_0));
 guarantee
 G((spec_policy = PARKING_0)-> (next(spec_policy)=(PARKING_1)));
 guarantee
 G((spec_policy = PARKING_1)-> (next(spec_policy)=(PARKING_2)));
 guarantee
 G((spec_policy = PARKING_2)-> (next(spec_policy)=(PARKED)));


//If Blocked we don't want to drive into obstacles. 
guarantee
 G ((obstacle = BLOCKED)->!(throttle = FWD));


//If Blocked from the right, don't drive into the wall.
guarantee
 G ((sideSense = BLOCKED) -> !((steer =RIGHT) &(throttle=FWD)));


//if blocked when looking for parking space dont start parking  
guarantee
 G(((obstacle=BLOCKED) &(spec_policy=MEASURING |spec_policy=SEEKING))->(next(spec_policy) = SEEKING));
 
 
//if blocked stop  timing the distance of the parking spot 
guarantee
 G((obstacle=BLOCKED)->(parkCommand=STOP));
// 
guarantee
G ((spec_policy = SEEKING & parkResult=NA) -> (throttle != STOP));



//Seeking --> Seeking
guarantee
G(((spec_policy = SEEKING) & (sideSense = BLOCKED) & parkResult=NA) ->  ((next(spec_policy) = spec_policy) & (parkCommand = STOP)));

//Seeking --> Measuring
guarantee
 G (((spec_policy = SEEKING) & sideSense=CLEAR & (obstacle = CLEAR) & parkResult = NA)
 -> (next(spec_policy) = MEASURING) & throttle=FWD & parkCommand=START & steer = CENTER);
// 

//Measuring --> Seeking 
guarantee
 G (((spec_policy = MEASURING) & (sideSense=BLOCKED) &(parkResult =NA))
 -> (next(spec_policy) = SEEKING)  & (parkCommand = STOP));

//Measuring --> Measuring

guarantee
 G (((spec_policy = MEASURING) & sideSense=CLEAR & (obstacle = CLEAR) &(parkResult =NA))
 -> (next(spec_policy) = spec_policy)&throttle=FWD & parkCommand=CHECK & steer = CENTER);
// 
 //Measuring --> Parking_0
guarantee
 G (((((spec_policy = MEASURING)|(spec_policy=SEEKING & PREV(spec_policy=MEASURING)))) & (obstacle = CLEAR) &(parkResult =PARALLEL))
 -> (next(spec_policy) = PARKING_0) & (throttle = STOP) & (parkCommand = STOP) & steer = RIGHT);
//
//
//Parking_0--> Parking_1 
guarantee
 G ((spec_policy = PARKING_0)
 -> (next(spec_policy) = PARKING_1) & (throttle = BWD) & steer = RIGHT & (parkCommand = STOP));
// 
// 
// 
 //Parking_1--> Parking_2 
guarantee
 G ((spec_policy = PARKING_1)
 -> (next(spec_policy) = PARKING_2) & (throttle = STOP) & steer = LEFT & (parkCommand = STOP));
 
// 
 //Parking_2--> Parked 
guarantee
 G ((spec_policy = PARKING_2)
 -> (next(spec_policy) = PARKED) & (throttle = BWD) & steer = LEFT & (parkCommand = STOP));

//
//Parked--> Parked 
guarantee
 G (((spec_policy = PARKED))
 -> (next(spec_policy) = spec_policy) & (throttle = STOP) & (steer = CENTER) & (parkCommand = STOP));
 


assumption
G ((spec_policy = SEEKING)->next(parkResult = NA));

assumption
  GF ((parkResult=PARALLEL)&(obstacle=CLEAR));

assumption
sideSense=BLOCKED & parkResult = NA;

//SPECENV
assumption
  respondsTo((throttle=BWD),(obstacle=CLEAR));

assumption
 G ((throttle=STOP)->((obstacle=next(obstacle))&(sideSense=next(sideSense))));

//LTLSPECENV
// G ((spec_policy = SEEKING)  & (throttle=FWD)-> F(spec_policy = PARKING_0));
//
//LTLSPECENV
// parkResult = NA ;
 
 
 
 
 
 
  
//LTLSPECENV
// G ((spec_policy=SEEKING) -> (parkResult = NA));

//LTLSPEC
// G (((spec_policy=SEEKING|spec_policy=MEASURING)& obstacle = BLOCKED)->(throttle = BWD)); // TODO - Check If NECESSARY
 
//LTLSPEC
// G F ( (throttle = FWD) & (steer = CENTER) ); 
//LTLSPEC
// G (!(spec_policy = PARKED) -> F !(throttle = STOP));
 
 
 //LTLSPEC //initial state
// (throttle = STOP & steer= CENTER & spec_policy = SEEKING & parkCommand = STOP & !spec_park);

//spec_policy state tarnsition restrictions
//LTLSPEC
// G (((spec_policy = SEEKING) & (sideSense=BLOCKED) & (obstacle=CLEAR))
// -> (next(spec_policy)=spec_policy) & throttle=FWD & parkCommand=STOP &steer = CENTER);

//LTLSPEC
// G (((spec_policy = SEEKING) & (sideSense=BLOCKED))
// -> (next(spec_policy)=spec_policy) & parkCommand=STOP & steer = CENTER);

//LTLSPEC
// G ((spec_spec_park) ->F((obstacle = BLOCKED) & (sideSense = BLOCKED)));

//LTLSPECENV
// G((!((spec_policy = spec_parkING) | (spec_policy = MEASURING) | (spec_policy = spec_parkED )) -> !next(spec_park) ));
//
//LTLSPECENV
// G((spec_park & (spec_policy = spec_parkED) -> next(spec_park)));
pattern respondsTo(trigger, response) {
  var boolean responded;
  responded;
  G (next(responded) iff (response or responded and !trigger));
  GF (responded);
}
