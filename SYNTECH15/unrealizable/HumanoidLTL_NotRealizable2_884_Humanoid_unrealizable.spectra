module Humanoid
		env {CLEAR, BLOCKED} Obstacle ;
		env {QUIET, NOISE} Noise ;
		env {N,NW,W,SW,SO,SE,EA,NE} Heading;
		env {FREE, PRESSED} Button ;
		sys {FWD, BWD, STOP, TURN_FWD, TURN_BWD, CALIB_TURN, CALIB_FWD} LeftMotor ;
		sys {FWD, BWD, STOP, TURN_FWD, TURN_BWD, CALIB_TURN, CALIB_FWD} RightMotor ;
		sys {FWD, BWD, STOP} HeadMotor ;
		sys {FWD, BWD, TURN_LEFT_1, TURN_LEFT_2} spec_nextMoveMode ;
		sys {Q0,Q1,Q2,Q3} spec_state ;
		sys {M0,M1} spec_search ;
		sys {N,NW,W,SW,SO,SE,EA,NE} next_head ;
		
//to prevant robot from going FWD<-->BWD indefinitely 
//////////////////////////////////////////////
guarantee
	spec_search = M0 & next_head = N;
	
guarantee 
	G((spec_state = Q0 & spec_nextMoveMode = FWD & next(spec_nextMoveMode = BWD)) -> next(spec_state = Q1));

guarantee 
	G((spec_state = Q1 & spec_nextMoveMode = BWD & next(spec_nextMoveMode = FWD)) -> next(spec_state = Q2));
	
guarantee
	G(!(spec_state = Q2 & spec_nextMoveMode = FWD & next(spec_nextMoveMode = BWD)));

guarantee 
	G((spec_state = Q1 & next(spec_nextMoveMode = BWD)) -> (next(spec_state = Q1)));

guarantee 
	G((spec_state = Q2 & next(spec_nextMoveMode = FWD)) -> (next(spec_state = Q2)));
	
guarantee
	G(( (spec_nextMoveMode = TURN_LEFT_1) | (spec_nextMoveMode = TURN_LEFT_2)) -> next(spec_state = Q0));

guarantee 
	G ((Button = PRESSED) -> (next_head = Heading));

guarantee 
	G ((spec_search = M0 & spec_nextMoveMode = FWD & Noise = NOISE & Heading != next_head) -> 
		(next(spec_search = M1)));

guarantee
	G((spec_search = M1 & Heading = next_head) -> next(spec_search = M0));
	
guarantee
	G(((Obstacle = BLOCKED) & !(Y(Y(spec_nextMoveMode = TURN_LEFT_2)))) -> (!(spec_nextMoveMode = FWD)));
	
guarantee
	G((Y(spec_nextMoveMode = BWD) & (spec_nextMoveMode = FWD)) <-> (LeftMotor = FWD & RightMotor = BWD));

guarantee
	G((Y(spec_nextMoveMode = FWD) & (spec_nextMoveMode = BWD)) <-> (LeftMotor = BWD & RightMotor = FWD));
	
guarantee
  GF (spec_nextMoveMode=FWD);

//// Some technical limitations on the movement
//
// Turn movement is an atomic movement of 2 steps, turn_left_1 to turn_left_2, can't do 1 without doing 2 right after, and 2 can come only after 1
// Starting to turn and stoping needs a calibration from FWD movement

guarantee
	G (Y(spec_nextMoveMode = TURN_LEFT_1) -> (LeftMotor = FWD & RightMotor = TURN_FWD));
	
guarantee
	G (Y(spec_nextMoveMode = TURN_LEFT_2) -> (LeftMotor = BWD & RightMotor = TURN_BWD));
	
guarantee
	G (Y(spec_nextMoveMode = TURN_LEFT_1) <-> spec_nextMoveMode = TURN_LEFT_2);
	
guarantee //This motor movements can only be used in turning
	G (!(Y(spec_nextMoveMode = TURN_LEFT_1) | Y(spec_nextMoveMode = TURN_LEFT_2)) -> !(LeftMotor = TURN_BWD | RightMotor = TURN_BWD | LeftMotor = TURN_FWD | RightMotor = TURN_FWD));	
	
guarantee //Going backward can only start from a calibrated FWD movement
	G ((spec_nextMoveMode = BWD) -> (Y(spec_nextMoveMode = FWD) | Y(spec_nextMoveMode = BWD)));

guarantee // calibration movement to start turning
	G  ((Y(spec_nextMoveMode = FWD) & spec_nextMoveMode = TURN_LEFT_1) <-> (LeftMotor = CALIB_TURN & RightMotor = CALIB_TURN));
	
guarantee // Calibration at the end of turning
	G  ((Y(spec_nextMoveMode = FWD) & Y(Y(spec_nextMoveMode = TURN_LEFT_2))) <-> (LeftMotor = CALIB_FWD & RightMotor = CALIB_FWD));
	
guarantee //Cant start turning from backward movement
	G ( (Y(spec_nextMoveMode = BWD)) -> (spec_nextMoveMode != TURN_LEFT_1)) ;
	
assumption
  respondsTo((spec_search=M1),(Heading=next_head));
	
assumption
  respondsTo((spec_nextMoveMode=TURN_LEFT_1),(Heading=next_head|(spec_nextMoveMode!=TURN_LEFT_2&spec_nextMoveMode!=TURN_LEFT_2)));

assumption
	G(((spec_nextMoveMode = FWD | spec_nextMoveMode = BWD) & Heading != next_head) -> next(Heading != next_head));

assumption
  respondsTo((spec_nextMoveMode!=FWD),(Obstacle=CLEAR));

assumption
	G((spec_nextMoveMode = BWD & Obstacle = CLEAR) -> (next(Obstacle != BLOCKED)));
	
assumption
  GF ((Y(spec_nextMoveMode=TURN_LEFT_2)&Obstacle=CLEAR));

pattern respondsTo(trigger, response) {
  var boolean responded;
  responded;
  G (next(responded) iff (response or responded and !trigger));
  GF (responded);
}
