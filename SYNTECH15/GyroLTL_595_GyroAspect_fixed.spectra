// Initial file contents for AspectLTL aspect file (*.altl)
module GyroAspect
		env {CLEAR, BLOCKED} frontDistSense ;
		env {CLEAR, BLOCKED} backDistSense ;
		env boolean isReady ;
		env {AUTO, STP, FWD, BWD, TURN_LEFT, TURN_RIGHT} bluetoothCmd ;
		sys {STP, FWD, BWD, TURN_LEFT, TURN_RIGHT} balancer ;

// Initial state.
guarantee
	balancer=STP;

// Stop while the robot is not ready to move.
guarantee
	G (!isReady -> balancer=STP);

// Move forward only when there are no obstacles ahead.
guarantee 
	G ((balancer=FWD) -> (frontDistSense=CLEAR));

// Move backward only when there are no obstacles behind.
guarantee 
	G ((balancer=BWD) -> (backDistSense=CLEAR));

// When in auto mode, eventually move forward.
guarantee 
  GF (bluetoothCmd=AUTO->balancer=FWD);

// When in auto mode, always move forward when there are no obstacles ahead.
guarantee
	G ((bluetoothCmd=AUTO) -> ((frontDistSense=CLEAR & isReady) -> (balancer=FWD)));

// Pattern for: turning happens when blocked until clear
////////////////////////////////////////////////////////////
define 
  	turningOp := (balancer=TURN_RIGHT | balancer=TURN_LEFT); 
  	
  sys { S0, S1, S2} spec_blockedState ;

guarantee -- initial assignments: initial state
  spec_blockedState=S0;

guarantee -- safety this and next blockedState
  G ((bluetoothCmd=AUTO & isReady) -> ((spec_blockedState=S0 & ((!(frontDistSense=BLOCKED) & !(frontDistSense=CLEAR)) | (frontDistSense=CLEAR)) & next(spec_blockedState=S0)) |
  (spec_blockedState=S0 & (frontDistSense=BLOCKED & !turningOp & !(frontDistSense=CLEAR)) & next(spec_blockedState=S1)) |
  (spec_blockedState=S0 & (frontDistSense=BLOCKED & turningOp & !(frontDistSense=CLEAR)) & next(spec_blockedState=S2)) |
  (spec_blockedState=S1 & next(spec_blockedState=S1)) |
  (spec_blockedState=S2 & (frontDistSense=CLEAR) & next(spec_blockedState=S0)) |
  (spec_blockedState=S2 & (!turningOp & !(frontDistSense=CLEAR)) & next(spec_blockedState=S1)) |
  (spec_blockedState=S2 & (turningOp & !(frontDistSense=CLEAR)) & next(spec_blockedState=S2))));

guarantee -- equivalence of satisfaction
  GF (bluetoothCmd=AUTO->(spec_blockedState=S0|spec_blockedState=S2));
////////////////////////////////////////////////////////////

// Manual mode specifications:
////////////////////////////////////////////////////////////
guarantee
	G ((bluetoothCmd=FWD) -> ((frontDistSense=CLEAR & isReady)-> balancer=FWD));
	
guarantee
	G ((bluetoothCmd=BWD) -> ((backDistSense=CLEAR & isReady) -> balancer=BWD));
	
guarantee
	G ((bluetoothCmd=TURN_RIGHT) -> (isReady -> balancer=TURN_RIGHT));
	
guarantee
	G ((bluetoothCmd=TURN_LEFT) -> (isReady -> balancer=TURN_LEFT));
	
guarantee
	G ((bluetoothCmd=STP | (bluetoothCmd=FWD & frontDistSense=BLOCKED) | (bluetoothCmd=BWD & backDistSense=BLOCKED)) -> (isReady -> balancer=STP));
	
////////////////////////////////////////////////////////////

// The robot needs to be stabilized at first and it is not ready to move.
assumption
	!isReady;
	
// The robot will start in auto mode.
assumption
	bluetoothCmd=AUTO;

// Robot starts when not blocked forward and backward
assumption
	frontDistSense=CLEAR & backDistSense=CLEAR;

// Eventually the robot will be ready to move.
assumption
  GF (isReady);

// When the robot is ready, it will stay that way.
assumption
	G (isReady -> next(isReady));

// Pattern for: front surface becomes clear responds to continuously moving away from obstacle
////////////////////////////////////////////////////////////
define 
  	moveAwayFromFrontObstacle := !(balancer=FWD | balancer=STP); 

  sys { S0, S1} spec_moveAwayFromFrontObstacleState ;

guarantee -- initial assignments: initial state
  spec_moveAwayFromFrontObstacleState=S0;

guarantee -- safety this and next state
  G (((spec_moveAwayFromFrontObstacleState=S0 & ((!moveAwayFromFrontObstacle) | (moveAwayFromFrontObstacle & (!moveAwayFromFrontObstacle | frontDistSense = CLEAR))) & next(spec_moveAwayFromFrontObstacleState=S0)) |
  (spec_moveAwayFromFrontObstacleState=S0 & (moveAwayFromFrontObstacle & !(!moveAwayFromFrontObstacle | frontDistSense = CLEAR)) & next(spec_moveAwayFromFrontObstacleState=S1)) |
  (spec_moveAwayFromFrontObstacleState=S1 & ((!moveAwayFromFrontObstacle | frontDistSense = CLEAR)) & next(spec_moveAwayFromFrontObstacleState=S0)) |
  (spec_moveAwayFromFrontObstacleState=S1 & (!(!moveAwayFromFrontObstacle | frontDistSense = CLEAR)) & next(spec_moveAwayFromFrontObstacleState=S1))));

assumption -- equivalence of satisfaction
  GF (spec_moveAwayFromFrontObstacleState=S0);
////////////////////////////////////////////////////////////

// Pattern for: back surface becomes clear responds to continuously moving away from obstacle
////////////////////////////////////////////////////////////
define 
  	moveAwayFromBackObstacle := !(balancer=BWD | balancer=STP); 

  sys { S0, S1} spec_moveAwayFromBackObstacleState ;

guarantee -- initial assignments: initial state
  spec_moveAwayFromBackObstacleState=S0;

guarantee -- safety this and next state
  G (((spec_moveAwayFromBackObstacleState=S0 & ((!moveAwayFromBackObstacle) | (moveAwayFromBackObstacle & (!moveAwayFromBackObstacle | backDistSense = CLEAR))) & next(spec_moveAwayFromBackObstacleState=S0)) |
  (spec_moveAwayFromBackObstacleState=S0 & (moveAwayFromBackObstacle & !(!moveAwayFromBackObstacle | backDistSense = CLEAR)) & next(spec_moveAwayFromBackObstacleState=S1)) |
  (spec_moveAwayFromBackObstacleState=S1 & ((!moveAwayFromBackObstacle | backDistSense = CLEAR)) & next(spec_moveAwayFromBackObstacleState=S0)) |
  (spec_moveAwayFromBackObstacleState=S1 & (!(!moveAwayFromBackObstacle | backDistSense = CLEAR)) & next(spec_moveAwayFromBackObstacleState=S1))));

assumption -- equivalence of satisfaction
  GF (spec_moveAwayFromBackObstacleState=S0);
////////////////////////////////////////////////////////////

// Pattern for: front surface becomes blocked responds to continuously moving forward
////////////////////////////////////////////////////////////
  sys { S0, S1} spec_forwardingState ;

guarantee -- initial assignments: initial state
  spec_forwardingState=S0;

guarantee -- safety this and next state
  G (((spec_forwardingState=S0 & ((!(balancer=FWD)) | ((balancer=FWD) & (balancer!=FWD | frontDistSense=BLOCKED))) & next(spec_forwardingState=S0)) |
  (spec_forwardingState=S0 & ((balancer=FWD) & !(balancer!=FWD | frontDistSense=BLOCKED)) & next(spec_forwardingState=S1)) |
  (spec_forwardingState=S1 & ((balancer!=FWD | frontDistSense=BLOCKED)) & next(spec_forwardingState=S0)) |
  (spec_forwardingState=S1 & (!(balancer!=FWD | frontDistSense=BLOCKED)) & next(spec_forwardingState=S1))));

assumption -- equivalence of satisfaction
  GF (spec_forwardingState=S0);
////////////////////////////////////////////////////////////

// Pattern for: back surface becomes blocked responds to continuously moving backward
////////////////////////////////////////////////////////////
  sys { S0, S1} spec_backwardingState ;

guarantee -- initial assignments: initial state
  spec_backwardingState=S0;

guarantee -- safety this and next state
  G (((spec_backwardingState=S0 & ((!(balancer=BWD)) | ((balancer=BWD) & (balancer!=BWD | backDistSense=BLOCKED))) & next(spec_backwardingState=S0)) |
  (spec_backwardingState=S0 & ((balancer=BWD) & !(balancer!=BWD | backDistSense=BLOCKED)) & next(spec_backwardingState=S1)) |
  (spec_backwardingState=S1 & ((balancer!=BWD | backDistSense=BLOCKED)) & next(spec_backwardingState=S0)) |
  (spec_backwardingState=S1 & (!(balancer!=BWD | backDistSense=BLOCKED)) & next(spec_backwardingState=S1))));

assumption -- equivalence of satisfaction
  GF (spec_backwardingState=S0);
////////////////////////////////////////////////////////////